//
//  Plate.swift
//  Blagaprint
//
//  Created by Ivan Magda on 03.12.15.
//  Copyright (c) 2015 Blagaprint. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class Plate : NSObject {

    //// Drawing Methods

    public class func drawPlateCanvas(frame frame: CGRect = CGRectMake(40, 20, 320, 320), image: UIImage = UIImage(named: "image.png")!, isPlateImageVisible: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let shadowColor = UIColor(red: 0.674, green: 0.675, blue: 0.663, alpha: 1.000)
        let color = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)
        let plateInnerShadowColor = UIColor(red: 0.667, green: 0.675, blue: 0.663, alpha: 1.000)
        let gold = UIColor(red: 0.831, green: 0.686, blue: 0.216, alpha: 1.000)

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = UIColor.grayColor().colorWithAlphaComponent(0.5)
        outerShadow.shadowOffset = CGSizeMake(16.1, 2.1)
        outerShadow.shadowBlurRadius = 15
        let plateInnerShadow = NSShadow()
        plateInnerShadow.shadowColor = plateInnerShadowColor.colorWithAlphaComponent(0.1 * CGColorGetAlpha(plateInnerShadowColor.CGColor))
        plateInnerShadow.shadowOffset = CGSizeMake(13.1, 5.1)
        plateInnerShadow.shadowBlurRadius = 10

        //// Variable Declarations
        let expression: CGFloat = isPlateImageVisible == true ? 0 : 0.1

        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.moveToPoint(CGPointMake(frame.maxX - 19.75, frame.minY + 0.49922 * frame.height))
        ovalPath.addCurveToPoint(CGPointMake(frame.minX + 0.48516 * frame.width, frame.maxY - 15.25), controlPoint1: CGPointMake(frame.maxX - 19.75, frame.minY + 0.74947 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.73541 * frame.width, frame.maxY - 15.25))
        ovalPath.addCurveToPoint(CGPointMake(frame.minX + 10.25, frame.minY + 0.49922 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.23490 * frame.width, frame.maxY - 15.25), controlPoint2: CGPointMake(frame.minX + 10.25, frame.minY + 0.74947 * frame.height))
        ovalPath.addCurveToPoint(CGPointMake(frame.minX + 0.48516 * frame.width, frame.minY + 14.75), controlPoint1: CGPointMake(frame.minX + 10.25, frame.minY + 0.24896 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.23490 * frame.width, frame.minY + 14.75))
        ovalPath.addCurveToPoint(CGPointMake(frame.maxX - 19.75, frame.minY + 0.49922 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.73541 * frame.width, frame.minY + 14.75), controlPoint2: CGPointMake(frame.maxX - 19.75, frame.minY + 0.24896 * frame.height))
        ovalPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, outerShadow.shadowOffset, outerShadow.shadowBlurRadius, (outerShadow.shadowColor as! UIColor).CGColor)
        UIColor.whiteColor().setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((plateInnerShadow.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (plateInnerShadow.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, plateInnerShadow.shadowOffset, plateInnerShadow.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        gold.setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()


        //// PickedImage Drawing
        let pickedImageRect = CGRectMake(frame.minX + 50, frame.minY + 55, 210, 210)
        let pickedImagePath = UIBezierPath()
        pickedImagePath.moveToPoint(CGPointMake(frame.maxX - 60, frame.minY + 0.50000 * frame.height))
        pickedImagePath.addCurveToPoint(CGPointMake(frame.minX + 0.48437 * frame.width, frame.maxY - 55), controlPoint1: CGPointMake(frame.maxX - 60, frame.minY + 0.68122 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.66559 * frame.width, frame.maxY - 55))
        pickedImagePath.addCurveToPoint(CGPointMake(frame.minX + 50, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.30316 * frame.width, frame.maxY - 55), controlPoint2: CGPointMake(frame.minX + 50, frame.minY + 0.68122 * frame.height))
        pickedImagePath.addCurveToPoint(CGPointMake(frame.minX + 0.48438 * frame.width, frame.minY + 55), controlPoint1: CGPointMake(frame.minX + 50, frame.minY + 0.31878 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.30316 * frame.width, frame.minY + 55))
        pickedImagePath.addCurveToPoint(CGPointMake(frame.maxX - 60, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.66559 * frame.width, frame.minY + 55), controlPoint2: CGPointMake(frame.maxX - 60, frame.minY + 0.31878 * frame.height))
        pickedImagePath.closePath()
        CGContextSaveGState(context)
        pickedImagePath.addClip()
        image.drawInRect(CGRectMake(floor(pickedImageRect.minX + 0.5), floor(pickedImageRect.minY + 0.5), image.size.width, image.size.height))
        CGContextRestoreGState(context)


        //// Depth Drawing
        let depthPath = UIBezierPath()
        depthPath.moveToPoint(CGPointMake(frame.maxX - 50, frame.minY + 0.50000 * frame.height))
        depthPath.addCurveToPoint(CGPointMake(frame.minX + 0.48437 * frame.width, frame.maxY - 45), controlPoint1: CGPointMake(frame.maxX - 50, frame.minY + 0.69848 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.68285 * frame.width, frame.maxY - 45))
        depthPath.addCurveToPoint(CGPointMake(frame.minX + 40, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.28590 * frame.width, frame.maxY - 45), controlPoint2: CGPointMake(frame.minX + 40, frame.minY + 0.69848 * frame.height))
        depthPath.addCurveToPoint(CGPointMake(frame.minX + 0.48438 * frame.width, frame.minY + 45), controlPoint1: CGPointMake(frame.minX + 40, frame.minY + 0.30152 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.28590 * frame.width, frame.minY + 45))
        depthPath.addCurveToPoint(CGPointMake(frame.maxX - 50, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.68285 * frame.width, frame.minY + 45), controlPoint2: CGPointMake(frame.maxX - 50, frame.minY + 0.30152 * frame.height))
        depthPath.closePath()
        color.setFill()
        depthPath.fill()

        ////// Depth Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, depthPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((plateInnerShadow.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let depthOpaqueShadow = (plateInnerShadow.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, plateInnerShadow.shadowOffset, plateInnerShadow.shadowBlurRadius, depthOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        depthOpaqueShadow.setFill()
        depthPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        gold.setStroke()
        depthPath.lineWidth = 0.3
        depthPath.stroke()


        //// Depth 2 Drawing
        let depth2Path = UIBezierPath()
        depth2Path.moveToPoint(CGPointMake(frame.maxX - 60, frame.minY + 0.50000 * frame.height))
        depth2Path.addCurveToPoint(CGPointMake(frame.minX + 0.48437 * frame.width, frame.maxY - 55), controlPoint1: CGPointMake(frame.maxX - 60, frame.minY + 0.68122 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.66559 * frame.width, frame.maxY - 55))
        depth2Path.addCurveToPoint(CGPointMake(frame.minX + 50, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.30316 * frame.width, frame.maxY - 55), controlPoint2: CGPointMake(frame.minX + 50, frame.minY + 0.68122 * frame.height))
        depth2Path.addCurveToPoint(CGPointMake(frame.minX + 0.48438 * frame.width, frame.minY + 55), controlPoint1: CGPointMake(frame.minX + 50, frame.minY + 0.31878 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.30316 * frame.width, frame.minY + 55))
        depth2Path.addCurveToPoint(CGPointMake(frame.maxX - 60, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.66559 * frame.width, frame.minY + 55), controlPoint2: CGPointMake(frame.maxX - 60, frame.minY + 0.31878 * frame.height))
        depth2Path.closePath()
        color.setFill()
        depth2Path.fill()
        shadowColor.setStroke()
        depth2Path.lineWidth = expression
        depth2Path.stroke()
    }

    //// Generated Images

    public class func imageOfPlateCanvas(frame frame: CGRect = CGRectMake(40, 20, 320, 320), image: UIImage = UIImage(named: "image.png")!, isPlateImageVisible: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            Plate.drawPlateCanvas(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), image: image, isPlateImageVisible: isPlateImageVisible)

        let imageOfPlateCanvas = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfPlateCanvas
    }

}

//
//  GalaxyNote2.swift
//  Blagaprint
//
//  Created by Ivan Magda on 30.10.15.
//  Copyright (c) 2015 Blagaprint. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

class GalaxyNote2 : NSObject {

    //// Cache

    struct Cache {
        static var outerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor().colorWithAlphaComponent(0.7), offset: CGSizeMake(-6.1, 8.1), blurRadius: 15)
        static var innerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor(), offset: CGSizeMake(1.1, -2.1), blurRadius: 4)
    }

    //// Initialization

    override class func load() {
    }

    //// Shadows

    class var outerShadow: NSShadow { return Cache.outerShadow }
    class var innerShadow: NSShadow { return Cache.innerShadow }

    //// Drawing Methods

    class func drawGalaxyNote2(frame: CGRect, colorOfText: UIColor, fillColor: UIColor, image: UIImage, textSize: CGFloat, textXscale: CGFloat, textRectHeight: CGFloat, caseText: String, textYscale: CGFloat, backgroundImageVisible: Bool) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)
        var fillColorRedComponent: CGFloat = 1,
            fillColorGreenComponent: CGFloat = 1,
            fillColorBlueComponent: CGFloat = 1
        fillColor.getRed(&fillColorRedComponent, green: &fillColorGreenComponent, blue: &fillColorBlueComponent, alpha: nil)

        let caseStrokeColor = UIColor(red: (fillColorRedComponent * 0.9), green: (fillColorGreenComponent * 0.9), blue: (fillColorBlueComponent * 0.9), alpha: (CGColorGetAlpha(fillColor.CGColor) * 0.9 + 0.1))

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let galaxyNote2CameraImage = UIImage(contentsOfFile: "galaxyNote2CameraImage.png")
        let galaxyNote2Speaker = UIImage(contentsOfFile: "galaxyNote2Speaker.png")

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 120.5, frame.minY + 220.5)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-94.18, -185.7))
        rectanglePath.addCurveToPoint(CGPointMake(-104.88, -153.29), controlPoint1: CGPointMake(-106.92, -169.44), controlPoint2: CGPointMake(-104.88, -153.29))
        rectanglePath.addLineToPoint(CGPointMake(-104.88, 150.74))
        rectanglePath.addCurveToPoint(CGPointMake(-80.02, 199), controlPoint1: CGPointMake(-104.88, 150.74), controlPoint2: CGPointMake(-108.36, 199))
        rectanglePath.addCurveToPoint(CGPointMake(-40.06, 199), controlPoint1: CGPointMake(-60.04, 199), controlPoint2: CGPointMake(-47.44, 199))
        rectanglePath.addCurveToPoint(CGPointMake(39.86, 199), controlPoint1: CGPointMake(-29.17, 199), controlPoint2: CGPointMake(12.82, 199))
        rectanglePath.addCurveToPoint(CGPointMake(79.83, 199), controlPoint1: CGPointMake(48.09, 199), controlPoint2: CGPointMake(54.85, 199))
        rectanglePath.addCurveToPoint(CGPointMake(104.77, 150.18), controlPoint1: CGPointMake(108.98, 199), controlPoint2: CGPointMake(104.77, 150.18))
        rectanglePath.addCurveToPoint(CGPointMake(104.77, -153.29), controlPoint1: CGPointMake(104.77, 150.18), controlPoint2: CGPointMake(104.77, -140.43))
        rectanglePath.addCurveToPoint(CGPointMake(93.1, -185.7), controlPoint1: CGPointMake(104.77, -154.42), controlPoint2: CGPointMake(105.95, -168.94))
        rectanglePath.addCurveToPoint(CGPointMake(61.97, -198), controlPoint1: CGPointMake(84.06, -197.51), controlPoint2: CGPointMake(69.34, -198))
        rectanglePath.addCurveToPoint(CGPointMake(-65.28, -198), controlPoint1: CGPointMake(49.21, -198), controlPoint2: CGPointMake(-60.82, -198))
        rectanglePath.addCurveToPoint(CGPointMake(-94.18, -185.7), controlPoint1: CGPointMake(-72.96, -198), controlPoint2: CGPointMake(-84.55, -198))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, GalaxyNote2.outerShadow.shadowOffset, GalaxyNote2.outerShadow.shadowBlurRadius, GalaxyNote2.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(GalaxyNote2.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = GalaxyNote2.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, GalaxyNote2.innerShadow.shadowOffset, GalaxyNote2.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 120.5, frame.minY + 220.5)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-105.01, -198, 210, 397)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-94.17, -185.7))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-104.88, -153.29), controlPoint1: CGPointMake(-106.92, -169.44), controlPoint2: CGPointMake(-104.88, -153.29))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-104.88, 150.74))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.01, 199), controlPoint1: CGPointMake(-104.88, 150.74), controlPoint2: CGPointMake(-108.36, 199))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-40.03, 199), controlPoint1: CGPointMake(-60.02, 199), controlPoint2: CGPointMake(-47.41, 199))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(39.94, 199), controlPoint1: CGPointMake(-29.13, 199), controlPoint2: CGPointMake(12.89, 199))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(79.93, 199), controlPoint1: CGPointMake(48.18, 199), controlPoint2: CGPointMake(55.94, 199))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(104.89, 150.18), controlPoint1: CGPointMake(107.93, 199), controlPoint2: CGPointMake(104.89, 150.18))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(104.89, -153.29), controlPoint1: CGPointMake(104.89, 150.18), controlPoint2: CGPointMake(104.89, -140.43))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(93.21, -185.7), controlPoint1: CGPointMake(104.89, -154.42), controlPoint2: CGPointMake(106.06, -168.94))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(62.06, -198), controlPoint1: CGPointMake(84.16, -197.51), controlPoint2: CGPointMake(69.43, -198))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-65.26, -198), controlPoint1: CGPointMake(49.29, -198), controlPoint2: CGPointMake(-60.8, -198))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-94.17, -185.7), controlPoint1: CGPointMake(-72.94, -198), controlPoint2: CGPointMake(-84.54, -198))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, GalaxyNote2.outerShadow.shadowOffset, GalaxyNote2.outerShadow.shadowBlurRadius, GalaxyNote2.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 1 + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(GalaxyNote2.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = GalaxyNote2.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, GalaxyNote2.innerShadow.shadowOffset, GalaxyNote2.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 16, frame.minY + 85)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, -93.33, 280, (textRectHeight + 10.0033333333))
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 88, frame.minY + 40, 80, 40)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 101.83, frame.maxY - 360.43))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 130.87, frame.minY + 79.57), controlPoint1: CGPointMake(frame.minX + 111.15, frame.maxY - 360.43), controlPoint2: CGPointMake(frame.minX + 123.24, frame.minY + 80.54))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 136.85, frame.minY + 76.62), controlPoint1: CGPointMake(frame.minX + 132.59, frame.minY + 79.35), controlPoint2: CGPointMake(frame.minX + 135.01, frame.minY + 76.78))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 87.2, frame.maxY - 363.38), controlPoint1: CGPointMake(frame.minX + 143.04, frame.minY + 76.09), controlPoint2: CGPointMake(frame.maxX - 94.92, frame.maxY - 363.38))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 87.2, frame.minY + 43.26), controlPoint1: CGPointMake(frame.maxX - 66.93, frame.maxY - 363.38), controlPoint2: CGPointMake(frame.maxX - 66.93, frame.minY + 43.26))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 136.85, frame.minY + 43.26), controlPoint1: CGPointMake(frame.maxX - 94.46, frame.minY + 43.26), controlPoint2: CGPointMake(frame.minX + 142.67, frame.minY + 43.26))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 130.87, frame.minY + 40.31), controlPoint1: CGPointMake(frame.minX + 135.01, frame.minY + 43.26), controlPoint2: CGPointMake(frame.minX + 132.85, frame.minY + 40.47))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 101.83, frame.minY + 40.31), controlPoint1: CGPointMake(frame.minX + 121.7, frame.minY + 39.61), controlPoint2: CGPointMake(frame.minX + 111.57, frame.minY + 40.31))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 101.83, frame.maxY - 360.43), controlPoint1: CGPointMake(frame.minX + 83.39, frame.minY + 40.31), controlPoint2: CGPointMake(frame.minX + 83.39, frame.maxY - 360.43))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        galaxyNote2CameraImage.drawInRect(CGRectMake(floor(cameraRect.minX + 0.5), floor(cameraRect.minY + 0.5), galaxyNote2CameraImage.size.width, galaxyNote2CameraImage.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        caseStrokeColor.setStroke()
        cameraPath.lineWidth = 2.5
        cameraPath.stroke()


        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 53.29, frame.minY + 31))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 178.5, frame.minY + 31.51), controlPoint1: CGPointMake(frame.minX + 84.6, frame.minY + 31.13), controlPoint2: CGPointMake(frame.minX + 178.5, frame.minY + 31.51))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 198.47, frame.minY + 35.1), controlPoint1: CGPointMake(frame.minX + 178.5, frame.minY + 31.51), controlPoint2: CGPointMake(frame.minX + 191.82, frame.minY + 31))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 210.17, frame.minY + 45.34), controlPoint1: CGPointMake(frame.minX + 205.12, frame.minY + 39.2), controlPoint2: CGPointMake(frame.minX + 206.27, frame.minY + 40.22))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 216.5, frame.minY + 60.2), controlPoint1: CGPointMake(frame.minX + 214.06, frame.minY + 50.46), controlPoint2: CGPointMake(frame.minX + 216.5, frame.minY + 60.2))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 216.5, frame.minY + 388))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 178.99, frame.minY + 409), controlPoint1: CGPointMake(frame.minX + 216.5, frame.minY + 388), controlPoint2: CGPointMake(frame.minX + 216.01, frame.minY + 409))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 159.5, frame.minY + 409), controlPoint1: CGPointMake(frame.minX + 141.96, frame.minY + 409), controlPoint2: CGPointMake(frame.minX + 159.5, frame.minY + 409))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 81.55, frame.minY + 409))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 62.06, frame.minY + 409), controlPoint1: CGPointMake(frame.minX + 81.55, frame.minY + 409), controlPoint2: CGPointMake(frame.minX + 62.25, frame.minY + 409))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 47, frame.minY + 388.51), controlPoint1: CGPointMake(frame.minX + 62, frame.minY + 409), controlPoint2: CGPointMake(frame.minX + 53, frame.minY + 392.61))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 26, frame.minY + 379.29), controlPoint1: CGPointMake(frame.minX + 34.34, frame.minY + 379.86), controlPoint2: CGPointMake(frame.minX + 26, frame.minY + 386.46))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 26.5, frame.minY + 60.2), controlPoint1: CGPointMake(frame.minX + 26, frame.minY + 372.12), controlPoint2: CGPointMake(frame.minX + 26.5, frame.minY + 60.2))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 29.91, frame.minY + 45.34), controlPoint1: CGPointMake(frame.minX + 26.5, frame.minY + 60.2), controlPoint2: CGPointMake(frame.minX + 26.01, frame.minY + 52.51))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 53.29, frame.minY + 31), controlPoint1: CGPointMake(frame.minX + 31.45, frame.minY + 42.5), controlPoint2: CGPointMake(frame.minX + 36.73, frame.minY + 35.1))
        caseStrokeColor.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()


        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(frame.minX + 180.5, frame.minY + 31.5))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 168.5, frame.minY + 40.19), controlPoint1: CGPointMake(frame.minX + 180.5, frame.minY + 31.5), controlPoint2: CGPointMake(frame.minX + 171.5, frame.minY + 33.19))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 168.5, frame.minY + 59.5), controlPoint1: CGPointMake(frame.minX + 165.5, frame.minY + 47.19), controlPoint2: CGPointMake(frame.minX + 168.5, frame.minY + 59.5))
        caseStrokeColor.setStroke()
        bezier2Path.lineWidth = 2.5
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        var bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(frame.minX + 80, frame.minY + 31))
        bezier3Path.addCurveToPoint(CGPointMake(frame.minX + 88, frame.minY + 40), controlPoint1: CGPointMake(frame.minX + 80, frame.minY + 31), controlPoint2: CGPointMake(frame.minX + 86.25, frame.minY + 33.03))
        bezier3Path.addCurveToPoint(CGPointMake(frame.minX + 88, frame.minY + 58.8), controlPoint1: CGPointMake(frame.minX + 89.75, frame.minY + 46.97), controlPoint2: CGPointMake(frame.minX + 88, frame.minY + 58.8))
        caseStrokeColor.setStroke()
        bezier3Path.lineWidth = 2.5
        bezier3Path.stroke()


        //// Rectangle 2 Drawing
        var rectangle2Path = UIBezierPath()
        rectangle2Path.moveToPoint(CGPointMake(frame.minX + 87, frame.minY + 36))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 90, frame.minY + 46))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 91, frame.minY + 46))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 96, frame.minY + 41))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 100, frame.minY + 40))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 112, frame.minY + 40))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 126, frame.minY + 40))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 140, frame.minY + 43))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 155, frame.minY + 43))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 166, frame.minY + 49))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 167, frame.minY + 43))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 173, frame.minY + 36))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 174, frame.minY + 31))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 80, frame.minY + 31))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 87, frame.minY + 36))
        rectangle2Path.closePath()
        caseStrokeColor.setFill()
        rectangle2Path.fill()


        //// Speaker Drawing
        let speakerRect: CGRect = CGRectMake(frame.minX + 60, frame.minY + 365, 30, 15)
        var speakerPath = UIBezierPath()
        speakerPath.moveToPoint(CGPointMake(frame.minX + 65.2, frame.maxY - 60))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 155.72, frame.maxY - 60), controlPoint1: CGPointMake(frame.minX + 72.14, frame.maxY - 60), controlPoint2: CGPointMake(frame.maxX - 163.34, frame.maxY - 60))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 155.72, frame.minY + 365), controlPoint1: CGPointMake(frame.maxX - 148.09, frame.maxY - 60), controlPoint2: CGPointMake(frame.maxX - 148.09, frame.minY + 365))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 65.2, frame.minY + 365), controlPoint1: CGPointMake(frame.maxX - 163.34, frame.minY + 365), controlPoint2: CGPointMake(frame.minX + 72.14, frame.minY + 365))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 65.2, frame.maxY - 60), controlPoint1: CGPointMake(frame.minX + 58.27, frame.minY + 365), controlPoint2: CGPointMake(frame.minX + 58.27, frame.maxY - 60))
        speakerPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        speakerPath.addClip()
        galaxyNote2Speaker.drawInRect(CGRectMake(floor(speakerRect.minX + 0.5), floor(speakerRect.minY + 0.5), galaxyNote2Speaker.size.width, galaxyNote2Speaker.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Speaker Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, speakerPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let speakerOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, speakerOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        speakerOpaqueShadow.setFill()
        speakerPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        speakerPath.lineWidth = 1.5
        speakerPath.stroke()
    }

    //// Generated Images

    class func imageOfGalaxyNote2(frame: CGRect, colorOfText: UIColor, fillColor: UIColor, image: UIImage, textSize: CGFloat, textXscale: CGFloat, textRectHeight: CGFloat, caseText: String, textYscale: CGFloat, backgroundImageVisible: Bool) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        GalaxyNote2.drawGalaxyNote2(frame, colorOfText: colorOfText, fillColor: fillColor, image: image, textSize: textSize, textXscale: textXscale, textRectHeight: textRectHeight, caseText: caseText, textYscale: textYscale, backgroundImageVisible: backgroundImageVisible)
        var imageOfGalaxyNote2 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGalaxyNote2!
    }

}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}

@objc protocol StyleKitSettableImage {
    var image: UIImage! { get set }
}

@objc protocol StyleKitSettableSelectedImage {
    var selectedImage: UIImage! { get set }
}

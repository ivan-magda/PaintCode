//
//  XiaomiMi4.swift
//  Blagaprint
//
//  Created by Ivan Magda on 31.10.15.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

class XiaomiMi4 : NSObject {

    //// Cache

    struct Cache {
        static var innerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor(), offset: CGSizeMake(1.1, -2.1), blurRadius: 4)
        static var outerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor().colorWithAlphaComponent(0.7), offset: CGSizeMake(-6.1, 8.1), blurRadius: 15)
    }

    //// Initialization

    override class func load() {
    }

    //// Shadows

    class var innerShadow: NSShadow { return Cache.innerShadow }
    class var outerShadow: NSShadow { return Cache.outerShadow }

    //// Drawing Methods

    class func drawXiaomiMi(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, textYscale: CGFloat, textXscale: CGFloat, textSize: CGFloat, textRectHeight: CGFloat, backgroundImageVisible: Bool, caseText: String) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var fillColorRedComponent: CGFloat = 1,
            fillColorGreenComponent: CGFloat = 1,
            fillColorBlueComponent: CGFloat = 1
        fillColor.getRed(&fillColorRedComponent, green: &fillColorGreenComponent, blue: &fillColorBlueComponent, alpha: nil)

        let cameraStrokeColor = UIColor(red: (fillColorRedComponent * 0.75), green: (fillColorGreenComponent * 0.75), blue: (fillColorBlueComponent * 0.75), alpha: (CGColorGetAlpha(fillColor.CGColor) * 0.75 + 0.25))
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let xiaomiMi4CameraImage = UIImage(contentsOfFile: "xiaomiMi4CameraImage.png")
        let xiaomiMi4Microphone = UIImage(contentsOfFile: "xiaomiMi4Microphone.png")

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 120.5, frame.minY + 220.5)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-80, -201))
        rectanglePath.addCurveToPoint(CGPointMake(-105, -173.28), controlPoint1: CGPointMake(-101, -201), controlPoint2: CGPointMake(-105, -173.28))
        rectanglePath.addLineToPoint(CGPointMake(-105, -141.6))
        rectanglePath.addLineToPoint(CGPointMake(-105, 115.8))
        rectanglePath.addLineToPoint(CGPointMake(-105, 155.4))
        rectanglePath.addCurveToPoint(CGPointMake(-80, 195), controlPoint1: CGPointMake(-105, 155.4), controlPoint2: CGPointMake(-105, 195))
        rectanglePath.addCurveToPoint(CGPointMake(-20, 195), controlPoint1: CGPointMake(-28.8, 195), controlPoint2: CGPointMake(-27.38, 195))
        rectanglePath.addCurveToPoint(CGPointMake(40, 195), controlPoint1: CGPointMake(-9.1, 195), controlPoint2: CGPointMake(12.93, 195))
        rectanglePath.addCurveToPoint(CGPointMake(80, 195), controlPoint1: CGPointMake(48.24, 195), controlPoint2: CGPointMake(38.53, 195))
        rectanglePath.addCurveToPoint(CGPointMake(105, 155.4), controlPoint1: CGPointMake(102, 195), controlPoint2: CGPointMake(105, 155.4))
        rectanglePath.addLineToPoint(CGPointMake(105, 115.8))
        rectanglePath.addCurveToPoint(CGPointMake(105, -141.6), controlPoint1: CGPointMake(105, 115.8), controlPoint2: CGPointMake(105, -128.87))
        rectanglePath.addCurveToPoint(CGPointMake(105, -173.28), controlPoint1: CGPointMake(105, -142.36), controlPoint2: CGPointMake(105, -173.28))
        rectanglePath.addCurveToPoint(CGPointMake(80, -201), controlPoint1: CGPointMake(105, -173.28), controlPoint2: CGPointMake(101, -201))
        rectanglePath.addCurveToPoint(CGPointMake(40, -201), controlPoint1: CGPointMake(64.66, -201), controlPoint2: CGPointMake(44.96, -201))
        rectanglePath.addCurveToPoint(CGPointMake(-20, -201), controlPoint1: CGPointMake(27.23, -201), controlPoint2: CGPointMake(-15.54, -201))
        rectanglePath.addCurveToPoint(CGPointMake(-80, -201), controlPoint1: CGPointMake(-27.69, -201), controlPoint2: CGPointMake(-30.3, -201))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, XiaomiMi4.outerShadow.shadowOffset, XiaomiMi4.outerShadow.shadowBlurRadius, XiaomiMi4.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(XiaomiMi4.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = XiaomiMi4.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, XiaomiMi4.innerShadow.shadowOffset, XiaomiMi4.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 120.5, frame.minY + 220.5)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-105, -201, 210, 396)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-80, -201))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-105, -173.28), controlPoint1: CGPointMake(-101, -201), controlPoint2: CGPointMake(-105, -173.28))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-105, -141.6))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-105, 115.8))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-105, 155.4))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80, 195), controlPoint1: CGPointMake(-105, 155.4), controlPoint2: CGPointMake(-105, 195))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-20, 195), controlPoint1: CGPointMake(-28.8, 195), controlPoint2: CGPointMake(-27.38, 195))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(40, 195), controlPoint1: CGPointMake(-9.1, 195), controlPoint2: CGPointMake(12.93, 195))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80, 195), controlPoint1: CGPointMake(48.24, 195), controlPoint2: CGPointMake(38.53, 195))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(105, 155.4), controlPoint1: CGPointMake(102, 195), controlPoint2: CGPointMake(105, 155.4))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(105, 115.8))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(105, -141.6), controlPoint1: CGPointMake(105, 115.8), controlPoint2: CGPointMake(105, -128.87))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(105, -173.28), controlPoint1: CGPointMake(105, -142.36), controlPoint2: CGPointMake(105, -173.28))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80, -201), controlPoint1: CGPointMake(105, -173.28), controlPoint2: CGPointMake(101, -201))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(40, -201), controlPoint1: CGPointMake(64.66, -201), controlPoint2: CGPointMake(44.96, -201))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-20, -201), controlPoint1: CGPointMake(27.23, -201), controlPoint2: CGPointMake(-15.54, -201))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80, -201), controlPoint1: CGPointMake(-27.69, -201), controlPoint2: CGPointMake(-30.3, -201))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, XiaomiMi4.outerShadow.shadowOffset, XiaomiMi4.outerShadow.shadowBlurRadius, XiaomiMi4.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(XiaomiMi4.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = XiaomiMi4.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, XiaomiMi4.innerShadow.shadowOffset, XiaomiMi4.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 16, frame.minY + 100)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, -93.33, 280, (textRectHeight + 10.0033333333))
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 100, frame.minY + 42, 40, 55)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 135.31, frame.minY + 47.02))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 134.05, frame.minY + 77.52), controlPoint1: CGPointMake(frame.minX + 143.29, frame.minY + 53.29), controlPoint2: CGPointMake(frame.minX + 139.88, frame.minY + 71.49))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 133.93, frame.minY + 80.03), controlPoint1: CGPointMake(frame.minX + 134.02, frame.minY + 78.37), controlPoint2: CGPointMake(frame.minX + 133.98, frame.minY + 79.21))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 133.93, frame.minY + 89.9), controlPoint1: CGPointMake(frame.minX + 133.7, frame.minY + 83.96), controlPoint2: CGPointMake(frame.minX + 133.93, frame.minY + 87.4))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 106.75, frame.minY + 89.9), controlPoint1: CGPointMake(frame.minX + 133.93, frame.minY + 98.95), controlPoint2: CGPointMake(frame.minX + 106.75, frame.minY + 99.77))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 106.75, frame.minY + 80.03), controlPoint1: CGPointMake(frame.minX + 106.75, frame.minY + 87.43), controlPoint2: CGPointMake(frame.minX + 107.07, frame.minY + 83.51))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 106.63, frame.minY + 78.46), controlPoint1: CGPointMake(frame.minX + 106.71, frame.minY + 79.51), controlPoint2: CGPointMake(frame.minX + 106.67, frame.minY + 78.99))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 104.45, frame.minY + 47.02), controlPoint1: CGPointMake(frame.minX + 101.24, frame.minY + 73.68), controlPoint2: CGPointMake(frame.minX + 95.99, frame.minY + 53.67))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 135.31, frame.minY + 47.02), controlPoint1: CGPointMake(frame.minX + 112.97, frame.minY + 40.33), controlPoint2: CGPointMake(frame.minX + 126.78, frame.minY + 40.33))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(cameraRect.minX, -cameraRect.minY - 1, xiaomiMi4CameraImage.size.width, xiaomiMi4CameraImage.size.height), xiaomiMi4CameraImage.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        cameraStrokeColor.setStroke()
        cameraPath.lineWidth = 1
        cameraPath.stroke()


        //// Microphone Drawing
        let microphoneRect: CGRect = CGRectMake(frame.minX + 116.5, frame.minY + 31.5, 8, 8)
        var microphonePath = UIBezierPath(ovalInRect: microphoneRect)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, XiaomiMi4.outerShadow.shadowOffset, XiaomiMi4.outerShadow.shadowBlurRadius, XiaomiMi4.outerShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        microphonePath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(microphoneRect.minX, -microphoneRect.minY, xiaomiMi4Microphone.size.width, xiaomiMi4Microphone.size.height), xiaomiMi4Microphone.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Microphone Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, microphonePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(XiaomiMi4.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let microphoneOpaqueShadow = XiaomiMi4.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, XiaomiMi4.innerShadow.shadowOffset, XiaomiMi4.innerShadow.shadowBlurRadius, microphoneOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        microphoneOpaqueShadow.setFill()
        microphonePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        microphonePath.lineWidth = 1
        microphonePath.stroke()
    }

    //// Generated Images

    class func imageOfXiaomiMi(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, textYscale: CGFloat, textXscale: CGFloat, textSize: CGFloat, textRectHeight: CGFloat, backgroundImageVisible: Bool, caseText: String) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        XiaomiMi4.drawXiaomiMi(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, textYscale: textYscale, textXscale: textXscale, textSize: textSize, textRectHeight: textRectHeight, backgroundImageVisible: backgroundImageVisible, caseText: caseText)
        var imageOfXiaomiMi = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfXiaomiMi!
    }

}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}

@objc protocol StyleKitSettableImage {
    var image: UIImage! { get set }
}

@objc protocol StyleKitSettableSelectedImage {
    var selectedImage: UIImage! { get set }
}

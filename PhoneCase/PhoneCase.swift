//
//  PhoneCase.swift
//  Blagaprint
//
//  Created by Ivan Magda on 30.10.15.
//  Copyright (c) 2015 Blagaprint. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

class PhoneCase : NSObject {

    //// Cache

    struct Cache {
        static var innerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor(), offset: CGSizeMake(1.1, -2.1), blurRadius: 4)
        static var outerShadow: NSShadow = NSShadow(color: UIColor.darkGrayColor().colorWithAlphaComponent(0.7), offset: CGSizeMake(-6.1, 8.1), blurRadius: 15)
    }

    //// Initialization

    override class func load() {
    }

    //// Shadows

    class var innerShadow: NSShadow { return Cache.innerShadow }
    class var outerShadow: NSShadow { return Cache.outerShadow }

    //// Drawing Methods

    class func drawIPhone5Case(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let iPhone5CameraImage = UIImage(contentsOfFile: "iPhone5CameraImage.png")

        //// Variable Declarations
        let textYoffset = -textRectHeight

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 196.64)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-80.23, -166.09))
        rectanglePath.addCurveToPoint(CGPointMake(-89.41, -136.95), controlPoint1: CGPointMake(-91.16, -151.46), controlPoint2: CGPointMake(-89.41, -136.95))
        rectanglePath.addLineToPoint(CGPointMake(-89.41, 136.37))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, 171.54), controlPoint1: CGPointMake(-89.41, 136.37), controlPoint2: CGPointMake(-88.62, 159.54))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, 178.58), controlPoint1: CGPointMake(-74.31, 180.01), controlPoint2: CGPointMake(-61.77, 178.58))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, 178.58), controlPoint1: CGPointMake(-46.1, 178.58), controlPoint2: CGPointMake(30.54, 178.58))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, 171.54), controlPoint1: CGPointMake(60.8, 178.58), controlPoint2: CGPointMake(73.37, 181.02))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, 135.87), controlPoint1: CGPointMake(88.72, 160.49), controlPoint2: CGPointMake(90.46, 135.87))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, -136.95), controlPoint1: CGPointMake(90.46, 135.87), controlPoint2: CGPointMake(90.46, -125.39))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, -166.09), controlPoint1: CGPointMake(90.46, -137.96), controlPoint2: CGPointMake(91.47, -151.01))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.7), controlPoint2: CGPointMake(60.06, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.09), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 196.64)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 180, 356)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-80.23, -166.09))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.41, -136.95), controlPoint1: CGPointMake(-91.16, -151.46), controlPoint2: CGPointMake(-89.41, -136.95))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.41, 136.37))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, 171.54), controlPoint1: CGPointMake(-89.41, 136.37), controlPoint2: CGPointMake(-88.62, 159.54))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, 178.58), controlPoint1: CGPointMake(-74.31, 180.01), controlPoint2: CGPointMake(-61.77, 178.58))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, 178.58), controlPoint1: CGPointMake(-46.1, 178.58), controlPoint2: CGPointMake(30.54, 178.58))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, 171.54), controlPoint1: CGPointMake(60.8, 178.58), controlPoint2: CGPointMake(73.37, 181.02))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, 135.87), controlPoint1: CGPointMake(88.72, 160.49), controlPoint2: CGPointMake(90.46, 135.87))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, -136.95), controlPoint1: CGPointMake(90.46, 135.87), controlPoint2: CGPointMake(90.46, -125.39))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, -166.09), controlPoint1: CGPointMake(90.46, -137.96), controlPoint2: CGPointMake(91.47, -151.01))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.7), controlPoint2: CGPointMake(60.06, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.09), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 20, frame.minY + 60)
        CGContextRotateCTM(context, -270 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, textYoffset, 280, (textRectHeight + 0.00333333333339))
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 38, frame.minY + 30, 60, 25)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 48.41, frame.maxY - 345))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 133.43, frame.maxY - 345), controlPoint1: CGPointMake(frame.minX + 62.28, frame.maxY - 345), controlPoint2: CGPointMake(frame.maxX - 148.67, frame.maxY - 345))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 133.43, frame.minY + 30), controlPoint1: CGPointMake(frame.maxX - 118.19, frame.maxY - 345), controlPoint2: CGPointMake(frame.maxX - 118.19, frame.minY + 30))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 48.41, frame.minY + 30), controlPoint1: CGPointMake(frame.maxX - 148.67, frame.minY + 30), controlPoint2: CGPointMake(frame.minX + 62.28, frame.minY + 30))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 48.41, frame.maxY - 345), controlPoint1: CGPointMake(frame.minX + 34.53, frame.minY + 30), controlPoint2: CGPointMake(frame.minX + 34.53, frame.maxY - 345))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        iPhone5CameraImage.drawInRect(CGRectMake(floor(cameraRect.minX - 1 + 0.5), floor(cameraRect.minY - 3 + 0.5), iPhone5CameraImage.size.width, iPhone5CameraImage.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        cameraPath.lineWidth = 1.5
        cameraPath.stroke()
    }

    class func drawIPhone4Case(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let iPhone4CameraImage = UIImage(contentsOfFile: "iPhone4CameraImage.png")

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 196.64)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-80.23, -166.71))
        rectanglePath.addCurveToPoint(CGPointMake(-89.41, -139.2), controlPoint1: CGPointMake(-91.16, -152.91), controlPoint2: CGPointMake(-89.41, -139.2))
        rectanglePath.addLineToPoint(CGPointMake(-89.41, 118.76))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, 151.96), controlPoint1: CGPointMake(-89.41, 118.76), controlPoint2: CGPointMake(-88.62, 140.63))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, 158.59), controlPoint1: CGPointMake(-74.31, 159.95), controlPoint2: CGPointMake(-61.77, 158.59))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, 158.59), controlPoint1: CGPointMake(-46.1, 158.59), controlPoint2: CGPointMake(30.54, 158.59))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, 151.96), controlPoint1: CGPointMake(60.8, 158.59), controlPoint2: CGPointMake(73.37, 160.89))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, 118.29), controlPoint1: CGPointMake(88.72, 141.52), controlPoint2: CGPointMake(90.46, 118.29))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, -139.2), controlPoint1: CGPointMake(90.46, 118.29), controlPoint2: CGPointMake(90.46, -128.29))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, -166.71), controlPoint1: CGPointMake(90.46, -140.16), controlPoint2: CGPointMake(91.47, -152.48))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.73), controlPoint2: CGPointMake(60.06, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.71), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 196.64)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 180, 336)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-80.23, -166.71))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.41, -139.2), controlPoint1: CGPointMake(-91.16, -152.91), controlPoint2: CGPointMake(-89.41, -139.2))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.41, 118.76))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, 151.96), controlPoint1: CGPointMake(-89.41, 118.76), controlPoint2: CGPointMake(-88.62, 140.63))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, 158.59), controlPoint1: CGPointMake(-74.31, 159.95), controlPoint2: CGPointMake(-61.77, 158.59))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, 158.59), controlPoint1: CGPointMake(-46.1, 158.59), controlPoint2: CGPointMake(30.54, 158.59))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, 151.96), controlPoint1: CGPointMake(60.8, 158.59), controlPoint2: CGPointMake(73.37, 160.89))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, 118.29), controlPoint1: CGPointMake(88.72, 141.52), controlPoint2: CGPointMake(90.46, 118.29))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, -139.2), controlPoint1: CGPointMake(90.46, 118.29), controlPoint2: CGPointMake(90.46, -128.29))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, -166.71), controlPoint1: CGPointMake(90.46, -140.16), controlPoint2: CGPointMake(91.47, -152.48))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.73), controlPoint2: CGPointMake(60.06, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.71), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 20, frame.minY + 60)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, -83.33, 265, textRectHeight)
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 38, frame.minY + 30, 60, 25)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 48.41, frame.maxY - 325))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 133.43, frame.maxY - 325), controlPoint1: CGPointMake(frame.minX + 62.28, frame.maxY - 325), controlPoint2: CGPointMake(frame.maxX - 148.67, frame.maxY - 325))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 133.43, frame.minY + 30), controlPoint1: CGPointMake(frame.maxX - 118.19, frame.maxY - 325), controlPoint2: CGPointMake(frame.maxX - 118.19, frame.minY + 30))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 48.41, frame.minY + 30), controlPoint1: CGPointMake(frame.maxX - 148.67, frame.minY + 30), controlPoint2: CGPointMake(frame.minX + 62.28, frame.minY + 30))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 48.41, frame.maxY - 325), controlPoint1: CGPointMake(frame.minX + 34.53, frame.minY + 30), controlPoint2: CGPointMake(frame.minX + 34.53, frame.maxY - 325))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(cameraRect.minX - 1, -cameraRect.minY, iPhone4CameraImage.size.width, iPhone4CameraImage.size.height), iPhone4CameraImage.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        cameraPath.lineWidth = 1.5
        cameraPath.stroke()
    }

    class func drawIPhone6Case(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let iPhone6CameraImage = UIImage(contentsOfFile: "iPhone6CameraImage.png")

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 196.64)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-79.2, -165.47))
        rectanglePath.addCurveToPoint(CGPointMake(-89.4, -134.69), controlPoint1: CGPointMake(-91.34, -150.02), controlPoint2: CGPointMake(-89.4, -134.69))
        rectanglePath.addLineToPoint(CGPointMake(-89.4, 153.99))
        rectanglePath.addCurveToPoint(CGPointMake(-79.2, 191.13), controlPoint1: CGPointMake(-89.4, 153.99), controlPoint2: CGPointMake(-88.53, 178.45))
        rectanglePath.addCurveToPoint(CGPointMake(-51.65, 198.56), controlPoint1: CGPointMake(-72.62, 200.08), controlPoint2: CGPointMake(-58.68, 198.56))
        rectanglePath.addCurveToPoint(CGPointMake(69.65, 198.56), controlPoint1: CGPointMake(-41.27, 198.56), controlPoint2: CGPointMake(43.88, 198.56))
        rectanglePath.addCurveToPoint(CGPointMake(99.34, 191.13), controlPoint1: CGPointMake(77.5, 198.56), controlPoint2: CGPointMake(91.47, 201.14))
        rectanglePath.addCurveToPoint(CGPointMake(110.46, 153.46), controlPoint1: CGPointMake(108.52, 179.46), controlPoint2: CGPointMake(110.46, 153.46))
        rectanglePath.addCurveToPoint(CGPointMake(110.46, -134.69), controlPoint1: CGPointMake(110.46, 153.46), controlPoint2: CGPointMake(110.46, -122.48))
        rectanglePath.addCurveToPoint(CGPointMake(99.34, -165.47), controlPoint1: CGPointMake(110.46, -135.76), controlPoint2: CGPointMake(111.58, -149.55))
        rectanglePath.addCurveToPoint(CGPointMake(69.65, -177.14), controlPoint1: CGPointMake(90.71, -176.68), controlPoint2: CGPointMake(76.68, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-51.65, -177.14), controlPoint1: CGPointMake(57.49, -177.14), controlPoint2: CGPointMake(-47.4, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-79.2, -165.47), controlPoint1: CGPointMake(-58.97, -177.14), controlPoint2: CGPointMake(-70.01, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 196.64)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 200, 376)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-79.2, -165.47))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.4, -134.69), controlPoint1: CGPointMake(-91.34, -150.02), controlPoint2: CGPointMake(-89.4, -134.69))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.4, 153.99))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-79.2, 191.13), controlPoint1: CGPointMake(-89.4, 153.99), controlPoint2: CGPointMake(-88.53, 178.45))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-51.65, 198.56), controlPoint1: CGPointMake(-72.62, 200.08), controlPoint2: CGPointMake(-58.68, 198.56))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(69.65, 198.56), controlPoint1: CGPointMake(-41.27, 198.56), controlPoint2: CGPointMake(43.88, 198.56))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(99.34, 191.13), controlPoint1: CGPointMake(77.5, 198.56), controlPoint2: CGPointMake(91.47, 201.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(110.46, 153.46), controlPoint1: CGPointMake(108.52, 179.46), controlPoint2: CGPointMake(110.46, 153.46))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(110.46, -134.69), controlPoint1: CGPointMake(110.46, 153.46), controlPoint2: CGPointMake(110.46, -122.48))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(99.34, -165.47), controlPoint1: CGPointMake(110.46, -135.76), controlPoint2: CGPointMake(111.58, -149.55))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(69.65, -177.14), controlPoint1: CGPointMake(90.71, -176.68), controlPoint2: CGPointMake(76.68, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-51.65, -177.14), controlPoint1: CGPointMake(57.49, -177.14), controlPoint2: CGPointMake(-47.4, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-79.2, -165.47), controlPoint1: CGPointMake(-58.97, -177.14), controlPoint2: CGPointMake(-70.01, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 20, frame.minY + 60)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, -91.67, 300, (textRectHeight + 8.33666666667))
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 39.5, frame.minY + 30, 63.5, 25)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 49.9, frame.maxY - 365))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 145.72, frame.maxY - 365), controlPoint1: CGPointMake(frame.minX + 64.73, frame.maxY - 365), controlPoint2: CGPointMake(frame.maxX - 157.35, frame.maxY - 365))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 145.72, frame.minY + 30), controlPoint1: CGPointMake(frame.maxX - 134.09, frame.maxY - 365), controlPoint2: CGPointMake(frame.maxX - 134.09, frame.minY + 30))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 49.9, frame.minY + 30), controlPoint1: CGPointMake(frame.maxX - 157.35, frame.minY + 30), controlPoint2: CGPointMake(frame.minX + 62.77, frame.minY + 30))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 49.9, frame.maxY - 365), controlPoint1: CGPointMake(frame.minX + 37.04, frame.minY + 30), controlPoint2: CGPointMake(frame.minX + 35.07, frame.maxY - 365))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(cameraRect.minX + 1, -cameraRect.minY, iPhone6CameraImage.size.width, iPhone6CameraImage.size.height), iPhone6CameraImage.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        cameraPath.lineWidth = 1.5
        cameraPath.stroke()
    }

    class func drawIPhone6PlusCase(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let iPhone6CameraImage = UIImage(contentsOfFile: "iPhone6CameraImage.png")

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 196.64)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-78.16, -164.84))
        rectanglePath.addCurveToPoint(CGPointMake(-89.39, -132.43), controlPoint1: CGPointMake(-91.53, -148.58), controlPoint2: CGPointMake(-89.39, -132.43))
        rectanglePath.addLineToPoint(CGPointMake(-89.39, 171.6))
        rectanglePath.addCurveToPoint(CGPointMake(-78.16, 210.72), controlPoint1: CGPointMake(-89.39, 171.6), controlPoint2: CGPointMake(-88.43, 197.37))
        rectanglePath.addCurveToPoint(CGPointMake(-47.86, 218.55), controlPoint1: CGPointMake(-70.93, 220.14), controlPoint2: CGPointMake(-55.6, 218.55))
        rectanglePath.addCurveToPoint(CGPointMake(85.57, 218.55), controlPoint1: CGPointMake(-36.45, 218.55), controlPoint2: CGPointMake(57.21, 218.55))
        rectanglePath.addCurveToPoint(CGPointMake(118.22, 210.72), controlPoint1: CGPointMake(94.2, 218.55), controlPoint2: CGPointMake(109.57, 221.26))
        rectanglePath.addCurveToPoint(CGPointMake(130.46, 171.04), controlPoint1: CGPointMake(128.32, 198.43), controlPoint2: CGPointMake(130.46, 171.04))
        rectanglePath.addCurveToPoint(CGPointMake(130.46, -132.43), controlPoint1: CGPointMake(130.46, 171.04), controlPoint2: CGPointMake(130.46, -119.57))
        rectanglePath.addCurveToPoint(CGPointMake(118.22, -164.84), controlPoint1: CGPointMake(130.46, -133.56), controlPoint2: CGPointMake(131.69, -148.08))
        rectanglePath.addCurveToPoint(CGPointMake(85.57, -177.14), controlPoint1: CGPointMake(108.74, -176.65), controlPoint2: CGPointMake(93.3, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-47.86, -177.14), controlPoint1: CGPointMake(72.19, -177.14), controlPoint2: CGPointMake(-43.19, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-78.16, -164.84), controlPoint1: CGPointMake(-55.92, -177.14), controlPoint2: CGPointMake(-68.06, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 196.64)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 220, 396)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-78.16, -164.84))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.39, -132.43), controlPoint1: CGPointMake(-91.53, -148.58), controlPoint2: CGPointMake(-89.39, -132.43))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.39, 171.6))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-78.16, 210.72), controlPoint1: CGPointMake(-89.39, 171.6), controlPoint2: CGPointMake(-88.43, 197.37))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-47.86, 218.55), controlPoint1: CGPointMake(-70.93, 220.14), controlPoint2: CGPointMake(-55.6, 218.55))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(85.57, 218.55), controlPoint1: CGPointMake(-36.45, 218.55), controlPoint2: CGPointMake(57.21, 218.55))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(118.22, 210.72), controlPoint1: CGPointMake(94.2, 218.55), controlPoint2: CGPointMake(109.57, 221.26))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(130.46, 171.04), controlPoint1: CGPointMake(128.32, 198.43), controlPoint2: CGPointMake(130.46, 171.04))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(130.46, -132.43), controlPoint1: CGPointMake(130.46, 171.04), controlPoint2: CGPointMake(130.46, -119.57))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(118.22, -164.84), controlPoint1: CGPointMake(130.46, -133.56), controlPoint2: CGPointMake(131.69, -148.08))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(85.57, -177.14), controlPoint1: CGPointMake(108.74, -176.65), controlPoint2: CGPointMake(93.3, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-47.86, -177.14), controlPoint1: CGPointMake(72.19, -177.14), controlPoint2: CGPointMake(-43.19, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-78.16, -164.84), controlPoint1: CGPointMake(-55.92, -177.14), controlPoint2: CGPointMake(-68.06, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 20, frame.minY + 60)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, -100, 320, (textRectHeight + 16.67))
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 39.5, frame.minY + 30, 65.44, 26)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 48.76, frame.maxY - 384))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 165.76, frame.maxY - 384), controlPoint1: CGPointMake(frame.minX + 61.6, frame.maxY - 384), controlPoint2: CGPointMake(frame.maxX - 180.53, frame.maxY - 384))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 165.76, frame.minY + 30), controlPoint1: CGPointMake(frame.maxX - 151, frame.maxY - 384), controlPoint2: CGPointMake(frame.maxX - 152, frame.minY + 30))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 48.76, frame.minY + 30), controlPoint1: CGPointMake(frame.maxX - 179.53, frame.minY + 30), controlPoint2: CGPointMake(frame.minX + 60.6, frame.minY + 30))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 48.76, frame.maxY - 384), controlPoint1: CGPointMake(frame.minX + 36.92, frame.minY + 30), controlPoint2: CGPointMake(frame.minX + 35.92, frame.maxY - 384))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(cameraRect.minX + 3, -cameraRect.minY - 1, iPhone6CameraImage.size.width, iPhone6CameraImage.size.height), iPhone6CameraImage.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        cameraPath.lineWidth = 1.5
        cameraPath.stroke()
    }

    class func drawGalaxyS3(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let galaxyS3Led = UIImage(contentsOfFile: "galaxyS3Led.png")
        let galaxyS3CameraImage = UIImage(contentsOfFile: "galaxyS3CameraImage.png")
        let galaxyS3Speaker = UIImage(contentsOfFile: "galaxyS3Speaker.png")

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 197.64)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-80.23, -166.09))
        rectanglePath.addCurveToPoint(CGPointMake(-89.41, -136.95), controlPoint1: CGPointMake(-91.16, -151.46), controlPoint2: CGPointMake(-89.41, -136.95))
        rectanglePath.addLineToPoint(CGPointMake(-89.41, 136.37))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, 171.54), controlPoint1: CGPointMake(-89.41, 136.37), controlPoint2: CGPointMake(-88.62, 159.54))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, 178.58), controlPoint1: CGPointMake(-74.31, 180.01), controlPoint2: CGPointMake(-61.77, 178.58))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, 178.58), controlPoint1: CGPointMake(-46.1, 178.58), controlPoint2: CGPointMake(30.54, 178.58))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, 171.54), controlPoint1: CGPointMake(60.8, 178.58), controlPoint2: CGPointMake(73.37, 181.02))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, 135.87), controlPoint1: CGPointMake(88.72, 160.49), controlPoint2: CGPointMake(90.46, 135.87))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, -136.95), controlPoint1: CGPointMake(90.46, 135.87), controlPoint2: CGPointMake(90.46, -125.39))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, -166.09), controlPoint1: CGPointMake(90.46, -137.96), controlPoint2: CGPointMake(91.47, -151.01))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.7), controlPoint2: CGPointMake(60.06, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.09), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 197.64)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 180, 356)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-80.23, -166.09))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.41, -136.95), controlPoint1: CGPointMake(-91.16, -151.46), controlPoint2: CGPointMake(-89.41, -136.95))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.41, 136.37))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, 171.54), controlPoint1: CGPointMake(-89.41, 136.37), controlPoint2: CGPointMake(-88.62, 159.54))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, 178.58), controlPoint1: CGPointMake(-74.31, 180.01), controlPoint2: CGPointMake(-61.77, 178.58))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, 178.58), controlPoint1: CGPointMake(-46.1, 178.58), controlPoint2: CGPointMake(30.54, 178.58))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, 171.54), controlPoint1: CGPointMake(60.8, 178.58), controlPoint2: CGPointMake(73.37, 181.02))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, 135.87), controlPoint1: CGPointMake(88.72, 160.49), controlPoint2: CGPointMake(90.46, 135.87))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, -136.95), controlPoint1: CGPointMake(90.46, 135.87), controlPoint2: CGPointMake(90.46, -125.39))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, -166.09), controlPoint1: CGPointMake(90.46, -137.96), controlPoint2: CGPointMake(91.47, -151.01))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.7), controlPoint2: CGPointMake(60.06, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.09), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 20, frame.minY + 81)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, -83.33, 265, textRectHeight)
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Led Drawing
        let ledRect: CGRect = CGRectMake(frame.minX + 60.5, frame.minY + 40.5, 20, 20)
        var ledPath = UIBezierPath()
        ledPath.moveToPoint(CGPointMake(frame.minX + 60.92, frame.minY + 45.85))
        ledPath.addCurveToPoint(CGPointMake(frame.minX + 64.69, frame.minY + 41.2), controlPoint1: CGPointMake(frame.minX + 61.86, frame.minY + 44.69), controlPoint2: CGPointMake(frame.minX + 62.81, frame.minY + 42.13))
        ledPath.addCurveToPoint(CGPointMake(frame.minX + 76.02, frame.minY + 41.2), controlPoint1: CGPointMake(frame.minX + 66.58, frame.minY + 40.27), controlPoint2: CGPointMake(frame.minX + 74.13, frame.minY + 40.27))
        ledPath.addCurveToPoint(CGPointMake(frame.minX + 79.79, frame.minY + 45.85), controlPoint1: CGPointMake(frame.minX + 77.9, frame.minY + 42.13), controlPoint2: CGPointMake(frame.minX + 78.85, frame.minY + 43.99))
        ledPath.addCurveToPoint(CGPointMake(frame.minX + 79.79, frame.minY + 56.08), controlPoint1: CGPointMake(frame.minX + 80.74, frame.minY + 47.71), controlPoint2: CGPointMake(frame.minX + 80.74, frame.minY + 54.22))
        ledPath.addCurveToPoint(CGPointMake(frame.minX + 76.02, frame.minY + 59.8), controlPoint1: CGPointMake(frame.minX + 78.85, frame.minY + 57.94), controlPoint2: CGPointMake(frame.minX + 77.9, frame.minY + 58.87))
        ledPath.addCurveToPoint(CGPointMake(frame.minX + 64.69, frame.minY + 59.8), controlPoint1: CGPointMake(frame.minX + 74.13, frame.minY + 60.73), controlPoint2: CGPointMake(frame.minX + 66.58, frame.minY + 60.73))
        ledPath.addCurveToPoint(CGPointMake(frame.minX + 60.92, frame.minY + 56.08), controlPoint1: CGPointMake(frame.minX + 62.81, frame.minY + 58.87), controlPoint2: CGPointMake(frame.minX + 61.86, frame.minY + 57.94))
        ledPath.addCurveToPoint(CGPointMake(frame.minX + 60.92, frame.minY + 45.85), controlPoint1: CGPointMake(frame.minX + 59.98, frame.minY + 54.22), controlPoint2: CGPointMake(frame.minX + 60.92, frame.minY + 45.85))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        ledPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(ledRect.minX, -ledRect.minY, galaxyS3Led.size.width, galaxyS3Led.size.height), galaxyS3Led.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Led Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ledPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ledOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, ledOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ledOpaqueShadow.setFill()
        ledPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        ledPath.lineWidth = 1
        ledPath.stroke()


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 90.5, frame.minY + 30.5, 40, 40)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 90.5, frame.minY + 41.2))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 98.5, frame.minY + 31.9), controlPoint1: CGPointMake(frame.minX + 90.5, frame.minY + 41.2), controlPoint2: CGPointMake(frame.minX + 94.5, frame.minY + 33.76))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 122.5, frame.minY + 31.9), controlPoint1: CGPointMake(frame.minX + 102.5, frame.minY + 30.03), controlPoint2: CGPointMake(frame.minX + 118.5, frame.minY + 30.03))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 130.5, frame.minY + 41.2), controlPoint1: CGPointMake(frame.minX + 126.5, frame.minY + 33.76), controlPoint2: CGPointMake(frame.minX + 130.5, frame.minY + 41.2))
        cameraPath.addLineToPoint(CGPointMake(frame.minX + 130.5, frame.minY + 61.66))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 126.72, frame.minY + 66), controlPoint1: CGPointMake(frame.minX + 130.5, frame.minY + 61.66), controlPoint2: CGPointMake(frame.minX + 128.9, frame.minY + 63.89))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 122.5, frame.minY + 69.1), controlPoint1: CGPointMake(frame.minX + 125.44, frame.minY + 67.23), controlPoint2: CGPointMake(frame.minX + 123.97, frame.minY + 68.42))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 98.5, frame.minY + 69.1), controlPoint1: CGPointMake(frame.minX + 118.5, frame.minY + 70.97), controlPoint2: CGPointMake(frame.minX + 102.5, frame.minY + 70.97))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 90.5, frame.minY + 61.66), controlPoint1: CGPointMake(frame.minX + 94.5, frame.minY + 67.24), controlPoint2: CGPointMake(frame.minX + 90.5, frame.minY + 61.66))
        cameraPath.addLineToPoint(CGPointMake(frame.minX + 90.5, frame.minY + 41.2))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(cameraRect.minX, -cameraRect.minY, galaxyS3CameraImage.size.width, galaxyS3CameraImage.size.height), galaxyS3CameraImage.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        cameraPath.lineWidth = 1
        cameraPath.stroke()


        //// Speaker Drawing
        let speakerRect: CGRect = CGRectMake(frame.minX + 140.5, frame.minY + 43.5, 20, 14)
        var speakerPath = UIBezierPath()
        speakerPath.moveToPoint(CGPointMake(frame.minX + 140.92, frame.minY + 47.24))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 144.69, frame.minY + 43.99), controlPoint1: CGPointMake(frame.minX + 141.86, frame.minY + 46.43), controlPoint2: CGPointMake(frame.minX + 142.81, frame.minY + 44.64))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 156.02, frame.minY + 43.99), controlPoint1: CGPointMake(frame.minX + 146.58, frame.minY + 43.34), controlPoint2: CGPointMake(frame.minX + 154.13, frame.minY + 43.34))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 159.79, frame.minY + 47.24), controlPoint1: CGPointMake(frame.minX + 157.9, frame.minY + 44.64), controlPoint2: CGPointMake(frame.minX + 158.85, frame.minY + 45.94))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 159.79, frame.minY + 54.41), controlPoint1: CGPointMake(frame.minX + 160.74, frame.minY + 48.55), controlPoint2: CGPointMake(frame.minX + 160.74, frame.minY + 53.1))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 156.02, frame.minY + 57.01), controlPoint1: CGPointMake(frame.minX + 158.85, frame.minY + 55.71), controlPoint2: CGPointMake(frame.minX + 157.9, frame.minY + 56.36))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 144.69, frame.minY + 57.01), controlPoint1: CGPointMake(frame.minX + 154.13, frame.minY + 57.66), controlPoint2: CGPointMake(frame.minX + 146.58, frame.minY + 57.66))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 140.92, frame.minY + 54.41), controlPoint1: CGPointMake(frame.minX + 142.81, frame.minY + 56.36), controlPoint2: CGPointMake(frame.minX + 141.86, frame.minY + 55.71))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 140.92, frame.minY + 47.24), controlPoint1: CGPointMake(frame.minX + 139.98, frame.minY + 53.1), controlPoint2: CGPointMake(frame.minX + 140.92, frame.minY + 47.24))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        speakerPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(speakerRect.minX, -speakerRect.minY - 2, galaxyS3Speaker.size.width, galaxyS3Speaker.size.height), galaxyS3Speaker.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Speaker Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, speakerPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let speakerOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, speakerOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        speakerOpaqueShadow.setFill()
        speakerPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        speakerPath.lineWidth = 1
        speakerPath.stroke()
    }

    class func drawGalaxyS4(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let galaxyS4CameraImage = UIImage(contentsOfFile: "galaxyS4CameraImage.png")
        let galaxyS4Speaker = UIImage(contentsOfFile: "galaxyS4Speaker.png")

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 196.64)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-79.2, -165.47))
        rectanglePath.addCurveToPoint(CGPointMake(-89.4, -134.69), controlPoint1: CGPointMake(-91.34, -150.02), controlPoint2: CGPointMake(-89.4, -134.69))
        rectanglePath.addLineToPoint(CGPointMake(-89.4, 153.99))
        rectanglePath.addCurveToPoint(CGPointMake(-79.2, 191.13), controlPoint1: CGPointMake(-89.4, 153.99), controlPoint2: CGPointMake(-88.53, 178.45))
        rectanglePath.addCurveToPoint(CGPointMake(-51.65, 198.56), controlPoint1: CGPointMake(-72.62, 200.08), controlPoint2: CGPointMake(-58.68, 198.56))
        rectanglePath.addCurveToPoint(CGPointMake(69.65, 198.56), controlPoint1: CGPointMake(-41.27, 198.56), controlPoint2: CGPointMake(43.88, 198.56))
        rectanglePath.addCurveToPoint(CGPointMake(99.34, 191.13), controlPoint1: CGPointMake(77.5, 198.56), controlPoint2: CGPointMake(91.47, 201.14))
        rectanglePath.addCurveToPoint(CGPointMake(110.46, 153.46), controlPoint1: CGPointMake(108.52, 179.46), controlPoint2: CGPointMake(110.46, 153.46))
        rectanglePath.addCurveToPoint(CGPointMake(110.46, -134.69), controlPoint1: CGPointMake(110.46, 153.46), controlPoint2: CGPointMake(110.46, -122.48))
        rectanglePath.addCurveToPoint(CGPointMake(99.34, -165.47), controlPoint1: CGPointMake(110.46, -135.76), controlPoint2: CGPointMake(111.58, -149.55))
        rectanglePath.addCurveToPoint(CGPointMake(69.65, -177.14), controlPoint1: CGPointMake(90.71, -176.68), controlPoint2: CGPointMake(76.68, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-51.65, -177.14), controlPoint1: CGPointMake(57.49, -177.14), controlPoint2: CGPointMake(-47.4, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-79.2, -165.47), controlPoint1: CGPointMake(-58.97, -177.14), controlPoint2: CGPointMake(-70.01, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 196.64)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 200, 376)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-79.2, -165.47))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.4, -134.69), controlPoint1: CGPointMake(-91.34, -150.02), controlPoint2: CGPointMake(-89.4, -134.69))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.4, 153.99))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-79.2, 191.13), controlPoint1: CGPointMake(-89.4, 153.99), controlPoint2: CGPointMake(-88.53, 178.45))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-51.65, 198.56), controlPoint1: CGPointMake(-72.62, 200.08), controlPoint2: CGPointMake(-58.68, 198.56))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(69.65, 198.56), controlPoint1: CGPointMake(-41.27, 198.56), controlPoint2: CGPointMake(43.88, 198.56))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(99.34, 191.13), controlPoint1: CGPointMake(77.5, 198.56), controlPoint2: CGPointMake(91.47, 201.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(110.46, 153.46), controlPoint1: CGPointMake(108.52, 179.46), controlPoint2: CGPointMake(110.46, 153.46))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(110.46, -134.69), controlPoint1: CGPointMake(110.46, 153.46), controlPoint2: CGPointMake(110.46, -122.48))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(99.34, -165.47), controlPoint1: CGPointMake(110.46, -135.76), controlPoint2: CGPointMake(111.58, -149.55))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(69.65, -177.14), controlPoint1: CGPointMake(90.71, -176.68), controlPoint2: CGPointMake(76.68, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-51.65, -177.14), controlPoint1: CGPointMake(57.49, -177.14), controlPoint2: CGPointMake(-47.4, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-79.2, -165.47), controlPoint1: CGPointMake(-58.97, -177.14), controlPoint2: CGPointMake(-70.01, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 20.01, frame.minY + 90)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, -91.66, 270, (textRectHeight + 8.33333333333))
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Speaker Drawing
        let speakerRect: CGRect = CGRectMake(frame.minX + 70, frame.minY + 355, 30, 15)
        var speakerPath = UIBezierPath()
        speakerPath.moveToPoint(CGPointMake(frame.minX + 75.2, frame.maxY - 50))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 145.72, frame.maxY - 50), controlPoint1: CGPointMake(frame.minX + 82.14, frame.maxY - 50), controlPoint2: CGPointMake(frame.maxX - 153.34, frame.maxY - 50))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 145.72, frame.minY + 355), controlPoint1: CGPointMake(frame.maxX - 138.09, frame.maxY - 50), controlPoint2: CGPointMake(frame.maxX - 138.09, frame.minY + 355))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 75.2, frame.minY + 355), controlPoint1: CGPointMake(frame.maxX - 153.34, frame.minY + 355), controlPoint2: CGPointMake(frame.minX + 82.14, frame.minY + 355))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 75.2, frame.maxY - 50), controlPoint1: CGPointMake(frame.minX + 68.27, frame.minY + 355), controlPoint2: CGPointMake(frame.minX + 68.27, frame.maxY - 50))
        speakerPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        speakerPath.addClip()
        galaxyS4Speaker.drawInRect(CGRectMake(floor(speakerRect.minX + 0.5), floor(speakerRect.minY + 0.5), galaxyS4Speaker.size.width, galaxyS4Speaker.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Speaker Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, speakerPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let speakerOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, speakerOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        speakerOpaqueShadow.setFill()
        speakerPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        speakerPath.lineWidth = 1.5
        speakerPath.stroke()


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 100, frame.minY + 30, 46, 54)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 139.26, frame.minY + 65.01))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 139.26, frame.minY + 36.01), controlPoint1: CGPointMake(frame.minX + 148.25, frame.minY + 57), controlPoint2: CGPointMake(frame.minX + 148.25, frame.minY + 44.01))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 106.74, frame.minY + 36.01), controlPoint1: CGPointMake(frame.minX + 130.28, frame.minY + 28), controlPoint2: CGPointMake(frame.minX + 115.72, frame.minY + 28))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 106.74, frame.minY + 65.01), controlPoint1: CGPointMake(frame.minX + 97.75, frame.minY + 44.01), controlPoint2: CGPointMake(frame.minX + 97.75, frame.minY + 57))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 139.26, frame.minY + 65.01), controlPoint1: CGPointMake(frame.minX + 115.72, frame.minY + 73.01), controlPoint2: CGPointMake(frame.minX + 130.28, frame.minY + 73.01))
        cameraPath.closePath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 111.63, frame.minY + 67.46))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 115.04, frame.minY + 84), controlPoint1: CGPointMake(frame.minX + 111.63, frame.minY + 67.46), controlPoint2: CGPointMake(frame.minX + 110.49, frame.minY + 84))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 130.96, frame.minY + 84), controlPoint1: CGPointMake(frame.minX + 119.59, frame.minY + 84), controlPoint2: CGPointMake(frame.minX + 126.41, frame.minY + 84))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 134.37, frame.minY + 67.46), controlPoint1: CGPointMake(frame.minX + 135.51, frame.minY + 84), controlPoint2: CGPointMake(frame.minX + 134.37, frame.minY + 74.29))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(cameraRect.minX + 3, -cameraRect.minY, galaxyS4CameraImage.size.width, galaxyS4CameraImage.size.height), galaxyS4CameraImage.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)
    }

    class func drawGalaxyS5(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let galaxyS5CameraImage = UIImage(contentsOfFile: "galaxyS5CameraImage.png")
        let galaxyS5Speaker = UIImage(contentsOfFile: "galaxyS5Speaker.png")

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 105.01, frame.minY + 199.64)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-78.68, -164.84))
        rectanglePath.addCurveToPoint(CGPointMake(-89.39, -132.43), controlPoint1: CGPointMake(-91.43, -148.58), controlPoint2: CGPointMake(-89.39, -132.43))
        rectanglePath.addLineToPoint(CGPointMake(-89.39, 171.6))
        rectanglePath.addCurveToPoint(CGPointMake(-78.68, 210.72), controlPoint1: CGPointMake(-89.39, 171.6), controlPoint2: CGPointMake(-88.48, 197.37))
        rectanglePath.addCurveToPoint(CGPointMake(-49.76, 218.55), controlPoint1: CGPointMake(-71.77, 220.14), controlPoint2: CGPointMake(-57.14, 218.55))
        rectanglePath.addCurveToPoint(CGPointMake(77.61, 218.55), controlPoint1: CGPointMake(-38.86, 218.55), controlPoint2: CGPointMake(50.54, 218.55))
        rectanglePath.addCurveToPoint(CGPointMake(108.78, 210.72), controlPoint1: CGPointMake(85.85, 218.55), controlPoint2: CGPointMake(100.52, 221.26))
        rectanglePath.addCurveToPoint(CGPointMake(120.46, 171.04), controlPoint1: CGPointMake(118.42, 198.43), controlPoint2: CGPointMake(120.46, 171.04))
        rectanglePath.addCurveToPoint(CGPointMake(120.46, -132.43), controlPoint1: CGPointMake(120.46, 171.04), controlPoint2: CGPointMake(120.46, -119.57))
        rectanglePath.addCurveToPoint(CGPointMake(108.78, -164.84), controlPoint1: CGPointMake(120.46, -133.56), controlPoint2: CGPointMake(121.63, -148.08))
        rectanglePath.addCurveToPoint(CGPointMake(77.61, -177.14), controlPoint1: CGPointMake(99.72, -176.65), controlPoint2: CGPointMake(84.99, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-49.76, -177.14), controlPoint1: CGPointMake(64.84, -177.14), controlPoint2: CGPointMake(-45.29, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-78.68, -164.84), controlPoint1: CGPointMake(-57.44, -177.14), controlPoint2: CGPointMake(-69.04, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 105.01, frame.minY + 199.64)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 210, 396)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-78.68, -164.84))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.39, -132.43), controlPoint1: CGPointMake(-91.43, -148.58), controlPoint2: CGPointMake(-89.39, -132.43))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.39, 171.6))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-78.68, 210.72), controlPoint1: CGPointMake(-89.39, 171.6), controlPoint2: CGPointMake(-88.48, 197.37))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-49.76, 218.55), controlPoint1: CGPointMake(-71.77, 220.14), controlPoint2: CGPointMake(-57.14, 218.55))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(77.61, 218.55), controlPoint1: CGPointMake(-38.86, 218.55), controlPoint2: CGPointMake(50.54, 218.55))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(108.78, 210.72), controlPoint1: CGPointMake(85.85, 218.55), controlPoint2: CGPointMake(100.52, 221.26))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(120.46, 171.04), controlPoint1: CGPointMake(118.42, 198.43), controlPoint2: CGPointMake(120.46, 171.04))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(120.46, -132.43), controlPoint1: CGPointMake(120.46, 171.04), controlPoint2: CGPointMake(120.46, -119.57))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(108.78, -164.84), controlPoint1: CGPointMake(120.46, -133.56), controlPoint2: CGPointMake(121.63, -148.08))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(77.61, -177.14), controlPoint1: CGPointMake(99.72, -176.65), controlPoint2: CGPointMake(84.99, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-49.76, -177.14), controlPoint1: CGPointMake(64.84, -177.14), controlPoint2: CGPointMake(-45.29, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-78.68, -164.84), controlPoint1: CGPointMake(-57.44, -177.14), controlPoint2: CGPointMake(-69.04, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 16, frame.minY + 100)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, -93.33, 280, (textRectHeight + 10.0033333333))
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Speaker Drawing
        let speakerRect: CGRect = CGRectMake(frame.minX + 45, frame.minY + 358, 30, 15)
        var speakerPath = UIBezierPath()
        speakerPath.moveToPoint(CGPointMake(frame.minX + 50.2, frame.maxY - 67))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 170.72, frame.maxY - 67), controlPoint1: CGPointMake(frame.minX + 57.14, frame.maxY - 67), controlPoint2: CGPointMake(frame.maxX - 178.34, frame.maxY - 67))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 170.72, frame.minY + 358), controlPoint1: CGPointMake(frame.maxX - 163.09, frame.maxY - 67), controlPoint2: CGPointMake(frame.maxX - 163.09, frame.minY + 358))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 50.2, frame.minY + 358), controlPoint1: CGPointMake(frame.maxX - 178.34, frame.minY + 358), controlPoint2: CGPointMake(frame.minX + 57.14, frame.minY + 358))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 50.2, frame.maxY - 67), controlPoint1: CGPointMake(frame.minX + 43.27, frame.minY + 358), controlPoint2: CGPointMake(frame.minX + 43.27, frame.maxY - 67))
        speakerPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        speakerPath.addClip()
        galaxyS5Speaker.drawInRect(CGRectMake(floor(speakerRect.minX + 0.5), floor(speakerRect.minY + 0.5), galaxyS5Speaker.size.width, galaxyS5Speaker.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Speaker Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, speakerPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let speakerOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, speakerOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        speakerOpaqueShadow.setFill()
        speakerPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        speakerPath.lineWidth = 1.5
        speakerPath.stroke()


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 100, frame.minY + 33, 40, 60)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 140, frame.maxY - 357.02))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 100, frame.maxY - 395.42), controlPoint1: CGPointMake(frame.minX + 140, frame.maxY - 370.92), controlPoint2: CGPointMake(frame.maxX - 100, frame.maxY - 379.44))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 120.05, frame.minY + 33), controlPoint1: CGPointMake(frame.maxX - 100, frame.maxY - 403.39), controlPoint2: CGPointMake(frame.minX + 130.03, frame.minY + 32.88))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 140, frame.minY + 44.58), controlPoint1: CGPointMake(frame.minX + 110.03, frame.minY + 33.13), controlPoint2: CGPointMake(frame.maxX - 140, frame.minY + 37.12))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 100, frame.minY + 82.98), controlPoint1: CGPointMake(frame.maxX - 140, frame.minY + 59.48), controlPoint2: CGPointMake(frame.minX + 100, frame.minY + 70.17))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 140, frame.maxY - 357.02), controlPoint1: CGPointMake(frame.minX + 100, frame.minY + 95.79), controlPoint2: CGPointMake(frame.minX + 140, frame.maxY - 343.12))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(cameraRect.minX, -cameraRect.minY, galaxyS5CameraImage.size.width, galaxyS5CameraImage.size.height), galaxyS5CameraImage.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        cameraPath.lineWidth = 1.5
        cameraPath.stroke()
    }

    class func drawGalaxyS4Mini(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let galaxyS4Speaker = UIImage(contentsOfFile: "galaxyS4Speaker.png")
        let galaxyS4MiniCameraImage = UIImage(contentsOfFile: "galaxyS4MiniCameraImage.png")

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 109.01, frame.minY + 197.64)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-80.23, -166.71))
        rectanglePath.addCurveToPoint(CGPointMake(-89.41, -139.2), controlPoint1: CGPointMake(-91.16, -152.91), controlPoint2: CGPointMake(-89.41, -139.2))
        rectanglePath.addLineToPoint(CGPointMake(-89.41, 118.76))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, 151.96), controlPoint1: CGPointMake(-89.41, 118.76), controlPoint2: CGPointMake(-88.62, 140.63))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, 158.59), controlPoint1: CGPointMake(-74.31, 159.95), controlPoint2: CGPointMake(-61.77, 158.59))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, 158.59), controlPoint1: CGPointMake(-46.1, 158.59), controlPoint2: CGPointMake(30.54, 158.59))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, 151.96), controlPoint1: CGPointMake(60.8, 158.59), controlPoint2: CGPointMake(73.37, 160.89))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, 118.29), controlPoint1: CGPointMake(88.72, 141.52), controlPoint2: CGPointMake(90.46, 118.29))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, -139.2), controlPoint1: CGPointMake(90.46, 118.29), controlPoint2: CGPointMake(90.46, -128.29))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, -166.71), controlPoint1: CGPointMake(90.46, -140.16), controlPoint2: CGPointMake(91.47, -152.48))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.73), controlPoint2: CGPointMake(60.06, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.71), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 109.01, frame.minY + 197.64)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 180, 336)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-80.23, -166.71))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.41, -139.2), controlPoint1: CGPointMake(-91.16, -152.91), controlPoint2: CGPointMake(-89.41, -139.2))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.41, 118.76))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, 151.96), controlPoint1: CGPointMake(-89.41, 118.76), controlPoint2: CGPointMake(-88.62, 140.63))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, 158.59), controlPoint1: CGPointMake(-74.31, 159.95), controlPoint2: CGPointMake(-61.77, 158.59))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, 158.59), controlPoint1: CGPointMake(-46.1, 158.59), controlPoint2: CGPointMake(30.54, 158.59))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, 151.96), controlPoint1: CGPointMake(60.8, 158.59), controlPoint2: CGPointMake(73.37, 160.89))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, 118.29), controlPoint1: CGPointMake(88.72, 141.52), controlPoint2: CGPointMake(90.46, 118.29))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, -139.2), controlPoint1: CGPointMake(90.46, 118.29), controlPoint2: CGPointMake(90.46, -128.29))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, -166.71), controlPoint1: CGPointMake(90.46, -140.16), controlPoint2: CGPointMake(91.47, -152.48))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.73), controlPoint2: CGPointMake(60.06, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.71), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 20, frame.minY + 81)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, -83.33, 240, textRectHeight)
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: (textSize - 5)), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Speaker Drawing
        let speakerRect: CGRect = CGRectMake(frame.minX + 60, frame.minY + 305, 30, 15)
        var speakerPath = UIBezierPath()
        speakerPath.moveToPoint(CGPointMake(frame.minX + 65.2, frame.maxY - 60))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 135.72, frame.maxY - 60), controlPoint1: CGPointMake(frame.minX + 72.14, frame.maxY - 60), controlPoint2: CGPointMake(frame.maxX - 143.34, frame.maxY - 60))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 135.72, frame.minY + 305), controlPoint1: CGPointMake(frame.maxX - 128.09, frame.maxY - 60), controlPoint2: CGPointMake(frame.maxX - 128.09, frame.minY + 305))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 65.2, frame.minY + 305), controlPoint1: CGPointMake(frame.maxX - 143.34, frame.minY + 305), controlPoint2: CGPointMake(frame.minX + 72.14, frame.minY + 305))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 65.2, frame.maxY - 60), controlPoint1: CGPointMake(frame.minX + 58.27, frame.minY + 305), controlPoint2: CGPointMake(frame.minX + 58.27, frame.maxY - 60))
        speakerPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        speakerPath.addClip()
        galaxyS4Speaker.drawInRect(CGRectMake(floor(speakerRect.minX + 0.5), floor(speakerRect.minY + 0.5), galaxyS4Speaker.size.width, galaxyS4Speaker.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Speaker Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, speakerPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let speakerOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, speakerOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        speakerOpaqueShadow.setFill()
        speakerPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        speakerPath.lineWidth = 1.5
        speakerPath.stroke()


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 92, frame.minY + 26, 40, 50)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 126.14, frame.minY + 58.41))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 126.14, frame.minY + 31.56), controlPoint1: CGPointMake(frame.minX + 133.95, frame.minY + 51), controlPoint2: CGPointMake(frame.minX + 133.95, frame.minY + 38.98))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 97.86, frame.minY + 31.56), controlPoint1: CGPointMake(frame.minX + 118.33, frame.minY + 24.15), controlPoint2: CGPointMake(frame.minX + 105.67, frame.minY + 24.15))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 97.86, frame.minY + 58.41), controlPoint1: CGPointMake(frame.minX + 90.05, frame.minY + 38.98), controlPoint2: CGPointMake(frame.minX + 90.05, frame.minY + 51))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 126.14, frame.minY + 58.41), controlPoint1: CGPointMake(frame.minX + 105.67, frame.minY + 65.83), controlPoint2: CGPointMake(frame.minX + 118.33, frame.minY + 65.83))
        cameraPath.closePath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 102.11, frame.minY + 60.68))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 105.08, frame.minY + 76), controlPoint1: CGPointMake(frame.minX + 102.11, frame.minY + 60.68), controlPoint2: CGPointMake(frame.minX + 101.12, frame.minY + 76))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 118.92, frame.minY + 76), controlPoint1: CGPointMake(frame.minX + 109.03, frame.minY + 76), controlPoint2: CGPointMake(frame.minX + 114.97, frame.minY + 76))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 121.89, frame.minY + 60.68), controlPoint1: CGPointMake(frame.minX + 122.88, frame.minY + 76), controlPoint2: CGPointMake(frame.minX + 121.89, frame.minY + 67.01))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(cameraRect.minX, -cameraRect.minY, galaxyS4MiniCameraImage.size.width, galaxyS4MiniCameraImage.size.height), galaxyS4MiniCameraImage.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)
    }

    class func drawGalaxyS5Mini(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let galaxyS4Speaker = UIImage(contentsOfFile: "galaxyS4Speaker.png")
        let galaxyS5MiniCameraImage = UIImage(contentsOfFile: "galaxyS5MiniCameraImage.png")

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 109.01, frame.minY + 197.64)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-80.23, -166.71))
        rectanglePath.addCurveToPoint(CGPointMake(-89.41, -139.2), controlPoint1: CGPointMake(-91.16, -152.91), controlPoint2: CGPointMake(-89.41, -139.2))
        rectanglePath.addLineToPoint(CGPointMake(-89.41, 118.76))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, 151.96), controlPoint1: CGPointMake(-89.41, 118.76), controlPoint2: CGPointMake(-88.62, 140.63))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, 158.59), controlPoint1: CGPointMake(-74.31, 159.95), controlPoint2: CGPointMake(-61.77, 158.59))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, 158.59), controlPoint1: CGPointMake(-46.1, 158.59), controlPoint2: CGPointMake(30.54, 158.59))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, 151.96), controlPoint1: CGPointMake(60.8, 158.59), controlPoint2: CGPointMake(73.37, 160.89))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, 118.29), controlPoint1: CGPointMake(88.72, 141.52), controlPoint2: CGPointMake(90.46, 118.29))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, -139.2), controlPoint1: CGPointMake(90.46, 118.29), controlPoint2: CGPointMake(90.46, -128.29))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, -166.71), controlPoint1: CGPointMake(90.46, -140.16), controlPoint2: CGPointMake(91.47, -152.48))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.73), controlPoint2: CGPointMake(60.06, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.71), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 109.01, frame.minY + 197.64)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 180, 336)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-80.23, -166.71))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.41, -139.2), controlPoint1: CGPointMake(-91.16, -152.91), controlPoint2: CGPointMake(-89.41, -139.2))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.41, 118.76))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, 151.96), controlPoint1: CGPointMake(-89.41, 118.76), controlPoint2: CGPointMake(-88.62, 140.63))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, 158.59), controlPoint1: CGPointMake(-74.31, 159.95), controlPoint2: CGPointMake(-61.77, 158.59))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, 158.59), controlPoint1: CGPointMake(-46.1, 158.59), controlPoint2: CGPointMake(30.54, 158.59))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, 151.96), controlPoint1: CGPointMake(60.8, 158.59), controlPoint2: CGPointMake(73.37, 160.89))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, 118.29), controlPoint1: CGPointMake(88.72, 141.52), controlPoint2: CGPointMake(90.46, 118.29))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, -139.2), controlPoint1: CGPointMake(90.46, 118.29), controlPoint2: CGPointMake(90.46, -128.29))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, -166.71), controlPoint1: CGPointMake(90.46, -140.16), controlPoint2: CGPointMake(91.47, -152.48))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.73), controlPoint2: CGPointMake(60.06, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.71), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 19, frame.minY + 81)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, -83.33, 240, textRectHeight)
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: (textSize - 5)), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Speaker Drawing
        let speakerRect: CGRect = CGRectMake(frame.minX + 39, frame.minY + 301, 30, 15)
        var speakerPath = UIBezierPath()
        speakerPath.moveToPoint(CGPointMake(frame.minX + 44.2, frame.maxY - 64))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 156.72, frame.maxY - 64), controlPoint1: CGPointMake(frame.minX + 51.14, frame.maxY - 64), controlPoint2: CGPointMake(frame.maxX - 164.34, frame.maxY - 64))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 156.72, frame.minY + 301), controlPoint1: CGPointMake(frame.maxX - 149.09, frame.maxY - 64), controlPoint2: CGPointMake(frame.maxX - 149.09, frame.minY + 301))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 44.2, frame.minY + 301), controlPoint1: CGPointMake(frame.maxX - 164.34, frame.minY + 301), controlPoint2: CGPointMake(frame.minX + 51.14, frame.minY + 301))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 44.2, frame.maxY - 64), controlPoint1: CGPointMake(frame.minX + 37.27, frame.minY + 301), controlPoint2: CGPointMake(frame.minX + 37.27, frame.maxY - 64))
        speakerPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        speakerPath.addClip()
        galaxyS4Speaker.drawInRect(CGRectMake(floor(speakerRect.minX + 0.5), floor(speakerRect.minY + 0.5), galaxyS4Speaker.size.width, galaxyS4Speaker.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Speaker Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, speakerPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let speakerOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, speakerOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        speakerOpaqueShadow.setFill()
        speakerPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        speakerPath.lineWidth = 1.5
        speakerPath.stroke()


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 92, frame.minY + 26, 40, 52)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 132, frame.maxY - 310.68))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 88, frame.maxY - 343.96), controlPoint1: CGPointMake(frame.minX + 132, frame.maxY - 322.73), controlPoint2: CGPointMake(frame.maxX - 88, frame.maxY - 330.11))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 112.05, frame.minY + 26), controlPoint1: CGPointMake(frame.maxX - 88, frame.maxY - 350.87), controlPoint2: CGPointMake(frame.minX + 122.03, frame.minY + 25.9))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 128, frame.minY + 36.04), controlPoint1: CGPointMake(frame.minX + 102.03, frame.minY + 26.11), controlPoint2: CGPointMake(frame.maxX - 128, frame.minY + 29.57))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 92, frame.minY + 69.32), controlPoint1: CGPointMake(frame.maxX - 128, frame.minY + 48.95), controlPoint2: CGPointMake(frame.minX + 92, frame.minY + 58.21))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 132, frame.maxY - 310.68), controlPoint1: CGPointMake(frame.minX + 92, frame.minY + 80.42), controlPoint2: CGPointMake(frame.minX + 132, frame.maxY - 298.64))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(cameraRect.minX, -cameraRect.minY, galaxyS5MiniCameraImage.size.width, galaxyS5MiniCameraImage.size.height), galaxyS5MiniCameraImage.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        cameraPath.lineWidth = 1.5
        cameraPath.stroke()
    }

    class func drawGalaxyS6(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var fillColorRedComponent: CGFloat = 1,
            fillColorGreenComponent: CGFloat = 1,
            fillColorBlueComponent: CGFloat = 1
        fillColor.getRed(&fillColorRedComponent, green: &fillColorGreenComponent, blue: &fillColorBlueComponent, alpha: nil)

        let cameraStrokeColor = UIColor(red: (fillColorRedComponent * 0.75), green: (fillColorGreenComponent * 0.75), blue: (fillColorBlueComponent * 0.75), alpha: (CGColorGetAlpha(fillColor.CGColor) * 0.75 + 0.25))
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let galaxyS6CameraImage = UIImage(contentsOfFile: "galaxyS6CameraImage.png")

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 105.01, frame.minY + 199.64)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-78.68, -164.84))
        rectanglePath.addCurveToPoint(CGPointMake(-89.39, -132.43), controlPoint1: CGPointMake(-91.43, -148.58), controlPoint2: CGPointMake(-89.39, -132.43))
        rectanglePath.addLineToPoint(CGPointMake(-89.39, 171.6))
        rectanglePath.addCurveToPoint(CGPointMake(-78.68, 210.72), controlPoint1: CGPointMake(-89.39, 171.6), controlPoint2: CGPointMake(-88.48, 197.37))
        rectanglePath.addCurveToPoint(CGPointMake(-49.76, 218.55), controlPoint1: CGPointMake(-71.77, 220.14), controlPoint2: CGPointMake(-57.14, 218.55))
        rectanglePath.addCurveToPoint(CGPointMake(77.61, 218.55), controlPoint1: CGPointMake(-38.86, 218.55), controlPoint2: CGPointMake(50.54, 218.55))
        rectanglePath.addCurveToPoint(CGPointMake(108.78, 210.72), controlPoint1: CGPointMake(85.85, 218.55), controlPoint2: CGPointMake(100.52, 221.26))
        rectanglePath.addCurveToPoint(CGPointMake(120.46, 171.04), controlPoint1: CGPointMake(118.42, 198.43), controlPoint2: CGPointMake(120.46, 171.04))
        rectanglePath.addCurveToPoint(CGPointMake(120.46, -132.43), controlPoint1: CGPointMake(120.46, 171.04), controlPoint2: CGPointMake(120.46, -119.57))
        rectanglePath.addCurveToPoint(CGPointMake(108.78, -164.84), controlPoint1: CGPointMake(120.46, -133.56), controlPoint2: CGPointMake(121.63, -148.08))
        rectanglePath.addCurveToPoint(CGPointMake(77.61, -177.14), controlPoint1: CGPointMake(99.72, -176.65), controlPoint2: CGPointMake(84.99, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-49.76, -177.14), controlPoint1: CGPointMake(64.84, -177.14), controlPoint2: CGPointMake(-45.29, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-78.68, -164.84), controlPoint1: CGPointMake(-57.44, -177.14), controlPoint2: CGPointMake(-69.04, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 105.01, frame.minY + 199.64)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 210, 396)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-78.68, -164.84))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.39, -132.43), controlPoint1: CGPointMake(-91.43, -148.58), controlPoint2: CGPointMake(-89.39, -132.43))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.39, 171.6))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-78.68, 210.72), controlPoint1: CGPointMake(-89.39, 171.6), controlPoint2: CGPointMake(-88.48, 197.37))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-49.76, 218.55), controlPoint1: CGPointMake(-71.77, 220.14), controlPoint2: CGPointMake(-57.14, 218.55))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(77.61, 218.55), controlPoint1: CGPointMake(-38.86, 218.55), controlPoint2: CGPointMake(50.54, 218.55))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(108.78, 210.72), controlPoint1: CGPointMake(85.85, 218.55), controlPoint2: CGPointMake(100.52, 221.26))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(120.46, 171.04), controlPoint1: CGPointMake(118.42, 198.43), controlPoint2: CGPointMake(120.46, 171.04))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(120.46, -132.43), controlPoint1: CGPointMake(120.46, 171.04), controlPoint2: CGPointMake(120.46, -119.57))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(108.78, -164.84), controlPoint1: CGPointMake(120.46, -133.56), controlPoint2: CGPointMake(121.63, -148.08))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(77.61, -177.14), controlPoint1: CGPointMake(99.72, -176.65), controlPoint2: CGPointMake(84.99, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-49.76, -177.14), controlPoint1: CGPointMake(64.84, -177.14), controlPoint2: CGPointMake(-45.29, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-78.68, -164.84), controlPoint1: CGPointMake(-57.44, -177.14), controlPoint2: CGPointMake(-69.04, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 16, frame.minY + 100)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, -93.33, 280, (textRectHeight + 10.0033333333))
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 88, frame.minY + 49.68, 80, 40)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 101.83, frame.maxY - 350.75))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 130.87, frame.minY + 89.25), controlPoint1: CGPointMake(frame.minX + 111.15, frame.maxY - 350.75), controlPoint2: CGPointMake(frame.minX + 123.24, frame.minY + 90.22))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 136.85, frame.minY + 86.3), controlPoint1: CGPointMake(frame.minX + 132.59, frame.minY + 89.03), controlPoint2: CGPointMake(frame.minX + 135.01, frame.minY + 86.46))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 87.2, frame.maxY - 353.7), controlPoint1: CGPointMake(frame.minX + 143.04, frame.minY + 85.77), controlPoint2: CGPointMake(frame.maxX - 94.92, frame.maxY - 353.7))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 87.2, frame.minY + 52.94), controlPoint1: CGPointMake(frame.maxX - 66.93, frame.maxY - 353.7), controlPoint2: CGPointMake(frame.maxX - 66.93, frame.minY + 52.94))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 136.85, frame.minY + 52.94), controlPoint1: CGPointMake(frame.maxX - 94.46, frame.minY + 52.94), controlPoint2: CGPointMake(frame.minX + 142.67, frame.minY + 52.94))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 130.87, frame.minY + 49.99), controlPoint1: CGPointMake(frame.minX + 135.01, frame.minY + 52.94), controlPoint2: CGPointMake(frame.minX + 132.85, frame.minY + 50.15))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 101.83, frame.minY + 49.99), controlPoint1: CGPointMake(frame.minX + 121.7, frame.minY + 49.29), controlPoint2: CGPointMake(frame.minX + 111.57, frame.minY + 49.99))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 101.83, frame.maxY - 350.75), controlPoint1: CGPointMake(frame.minX + 83.39, frame.minY + 49.99), controlPoint2: CGPointMake(frame.minX + 83.39, frame.maxY - 350.75))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        galaxyS6CameraImage.drawInRect(CGRectMake(floor(cameraRect.minX + 0.5), floor(cameraRect.minY + 0.5), galaxyS6CameraImage.size.width, galaxyS6CameraImage.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        cameraStrokeColor.setStroke()
        cameraPath.lineWidth = 2.5
        cameraPath.stroke()
    }

    class func drawGalaxyA3A5(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var fillColorRedComponent: CGFloat = 1,
            fillColorGreenComponent: CGFloat = 1,
            fillColorBlueComponent: CGFloat = 1
        fillColor.getRed(&fillColorRedComponent, green: &fillColorGreenComponent, blue: &fillColorBlueComponent, alpha: nil)

        let caseStrokeColor = UIColor(red: (fillColorRedComponent * 0.9), green: (fillColorGreenComponent * 0.9), blue: (fillColorBlueComponent * 0.9), alpha: (CGColorGetAlpha(fillColor.CGColor) * 0.9 + 0.1))

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let galaxyA3CameraImage = UIImage(contentsOfFile: "galaxyA3CameraImage.png")
        let galaxyA3Led = UIImage(contentsOfFile: "galaxyA3Led.png")
        let galaxyA3Speaker = UIImage(contentsOfFile: "galaxyA3Speaker.png")

        //// Variable Declarations
        let textYoffset = -textRectHeight

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 197.64)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-80.23, -166.71))
        rectanglePath.addCurveToPoint(CGPointMake(-89.41, -139.2), controlPoint1: CGPointMake(-91.16, -152.91), controlPoint2: CGPointMake(-89.41, -139.2))
        rectanglePath.addLineToPoint(CGPointMake(-89.41, 118.76))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, 151.96), controlPoint1: CGPointMake(-89.41, 118.76), controlPoint2: CGPointMake(-88.62, 140.63))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, 158.59), controlPoint1: CGPointMake(-74.31, 159.95), controlPoint2: CGPointMake(-61.77, 158.59))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, 158.59), controlPoint1: CGPointMake(-46.1, 158.59), controlPoint2: CGPointMake(30.54, 158.59))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, 151.96), controlPoint1: CGPointMake(60.8, 158.59), controlPoint2: CGPointMake(73.37, 160.89))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, 118.29), controlPoint1: CGPointMake(88.72, 141.52), controlPoint2: CGPointMake(90.46, 118.29))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, -139.2), controlPoint1: CGPointMake(90.46, 118.29), controlPoint2: CGPointMake(90.46, -128.29))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, -166.71), controlPoint1: CGPointMake(90.46, -140.16), controlPoint2: CGPointMake(91.47, -152.48))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.73), controlPoint2: CGPointMake(60.06, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.71), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        caseStrokeColor.setStroke()
        rectanglePath.lineWidth = 10
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 197.64)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 180, 336)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-80.23, -166.71))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.41, -139.2), controlPoint1: CGPointMake(-91.16, -152.91), controlPoint2: CGPointMake(-89.41, -139.2))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.41, 118.76))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, 151.96), controlPoint1: CGPointMake(-89.41, 118.76), controlPoint2: CGPointMake(-88.62, 140.63))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, 158.59), controlPoint1: CGPointMake(-74.31, 159.95), controlPoint2: CGPointMake(-61.77, 158.59))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, 158.59), controlPoint1: CGPointMake(-46.1, 158.59), controlPoint2: CGPointMake(30.54, 158.59))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, 151.96), controlPoint1: CGPointMake(60.8, 158.59), controlPoint2: CGPointMake(73.37, 160.89))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, 118.29), controlPoint1: CGPointMake(88.72, 141.52), controlPoint2: CGPointMake(90.46, 118.29))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, -139.2), controlPoint1: CGPointMake(90.46, 118.29), controlPoint2: CGPointMake(90.46, -128.29))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, -166.71), controlPoint1: CGPointMake(90.46, -140.16), controlPoint2: CGPointMake(91.47, -152.48))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.73), controlPoint2: CGPointMake(60.06, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.71), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            caseStrokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 10
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 20, frame.minY + 81)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, (textYoffset - 0.00333333333339), 240, (textRectHeight + 0.00333333333339))
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: (textSize - 5)), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 91, frame.minY + 35, 40, 40)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 97.94, frame.maxY - 305))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 96.62, frame.maxY - 305), controlPoint1: CGPointMake(frame.minX + 107.19, frame.maxY - 305), controlPoint2: CGPointMake(frame.maxX - 106.78, frame.maxY - 305))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 96.62, frame.minY + 35), controlPoint1: CGPointMake(frame.maxX - 86.46, frame.maxY - 305), controlPoint2: CGPointMake(frame.maxX - 86.46, frame.minY + 35))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 97.94, frame.minY + 35), controlPoint1: CGPointMake(frame.maxX - 106.78, frame.minY + 35), controlPoint2: CGPointMake(frame.minX + 107.19, frame.minY + 35))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 97.94, frame.maxY - 305), controlPoint1: CGPointMake(frame.minX + 88.69, frame.minY + 35), controlPoint2: CGPointMake(frame.minX + 88.69, frame.maxY - 305))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        galaxyA3CameraImage.drawInRect(CGRectMake(floor(cameraRect.minX + 0.5), floor(cameraRect.minY + 1 + 0.5), galaxyA3CameraImage.size.width, galaxyA3CameraImage.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        caseStrokeColor.setStroke()
        cameraPath.lineWidth = 4.5
        cameraPath.stroke()


        //// Speaker Drawing
        let speakerRect: CGRect = CGRectMake(frame.minX + 141, frame.minY + 45, 20, 20)
        var speakerPath = UIBezierPath()
        speakerPath.moveToPoint(CGPointMake(frame.minX + 144.47, frame.maxY - 315))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 62.81, frame.maxY - 315), controlPoint1: CGPointMake(frame.minX + 149.09, frame.maxY - 315), controlPoint2: CGPointMake(frame.maxX - 67.89, frame.maxY - 315))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 62.81, frame.minY + 45), controlPoint1: CGPointMake(frame.maxX - 57.73, frame.maxY - 315), controlPoint2: CGPointMake(frame.maxX - 57.73, frame.minY + 45))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 144.47, frame.minY + 45), controlPoint1: CGPointMake(frame.maxX - 67.89, frame.minY + 45), controlPoint2: CGPointMake(frame.minX + 149.09, frame.minY + 45))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 144.47, frame.maxY - 315), controlPoint1: CGPointMake(frame.minX + 139.84, frame.minY + 45), controlPoint2: CGPointMake(frame.minX + 139.84, frame.maxY - 315))
        speakerPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        speakerPath.addClip()
        galaxyA3Speaker.drawInRect(CGRectMake(floor(speakerRect.minX + 0.5), floor(speakerRect.minY + 0.5), galaxyA3Speaker.size.width, galaxyA3Speaker.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Speaker Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, speakerPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let speakerOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, speakerOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        speakerOpaqueShadow.setFill()
        speakerPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        caseStrokeColor.setStroke()
        speakerPath.lineWidth = 4.5
        speakerPath.stroke()


        //// speakerRectangle Drawing
        let speakerRectanglePath = UIBezierPath(rect: CGRectMake(frame.minX + 131, frame.minY + 48, 11, 16))
        caseStrokeColor.setFill()
        speakerRectanglePath.fill()


        //// Led Drawing
        let ledRect: CGRect = CGRectMake(frame.minX + 60, frame.minY + 45, 20, 20)
        var ledPath = UIBezierPath()
        ledPath.moveToPoint(CGPointMake(frame.minX + 63.47, frame.maxY - 315))
        ledPath.addCurveToPoint(CGPointMake(frame.maxX - 143.81, frame.maxY - 315), controlPoint1: CGPointMake(frame.minX + 68.09, frame.maxY - 315), controlPoint2: CGPointMake(frame.maxX - 148.89, frame.maxY - 315))
        ledPath.addCurveToPoint(CGPointMake(frame.maxX - 143.81, frame.minY + 45), controlPoint1: CGPointMake(frame.maxX - 138.73, frame.maxY - 315), controlPoint2: CGPointMake(frame.maxX - 138.73, frame.minY + 45))
        ledPath.addCurveToPoint(CGPointMake(frame.minX + 63.47, frame.minY + 45), controlPoint1: CGPointMake(frame.maxX - 148.89, frame.minY + 45), controlPoint2: CGPointMake(frame.minX + 68.09, frame.minY + 45))
        ledPath.addCurveToPoint(CGPointMake(frame.minX + 63.47, frame.maxY - 315), controlPoint1: CGPointMake(frame.minX + 58.84, frame.minY + 45), controlPoint2: CGPointMake(frame.minX + 58.84, frame.maxY - 315))
        ledPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        ledPath.addClip()
        galaxyA3Led.drawInRect(CGRectMake(floor(ledRect.minX + 0.5), floor(ledRect.minY + 0.5), galaxyA3Led.size.width, galaxyA3Led.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Led Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ledPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ledOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, ledOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ledOpaqueShadow.setFill()
        ledPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        caseStrokeColor.setStroke()
        ledPath.lineWidth = 4.5
        ledPath.stroke()


        //// ledRectangle Drawing
        let ledRectanglePath = UIBezierPath(rect: CGRectMake(frame.minX + 80, frame.minY + 48, 11, 16))
        caseStrokeColor.setFill()
        ledRectanglePath.fill()
    }

    class func drawGalaxyA7(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var fillColorRedComponent: CGFloat = 1,
            fillColorGreenComponent: CGFloat = 1,
            fillColorBlueComponent: CGFloat = 1
        fillColor.getRed(&fillColorRedComponent, green: &fillColorGreenComponent, blue: &fillColorBlueComponent, alpha: nil)

        let caseStrokeColor = UIColor(red: (fillColorRedComponent * 0.9), green: (fillColorGreenComponent * 0.9), blue: (fillColorBlueComponent * 0.9), alpha: (CGColorGetAlpha(fillColor.CGColor) * 0.9 + 0.1))

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let galaxyA7Led = UIImage(contentsOfFile: "galaxyA7Led.png")
        let galaxyA7CameraImage = UIImage(contentsOfFile: "galaxyA7CameraImage.png")
        let galaxyA7Speaker = UIImage(contentsOfFile: "galaxyA7Speaker.png")

        //// Variable Declarations
        let textYoffset = -textRectHeight

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 197.64)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-80.23, -166.09))
        rectanglePath.addCurveToPoint(CGPointMake(-89.41, -136.95), controlPoint1: CGPointMake(-91.16, -151.46), controlPoint2: CGPointMake(-89.41, -136.95))
        rectanglePath.addLineToPoint(CGPointMake(-89.41, 136.37))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, 171.54), controlPoint1: CGPointMake(-89.41, 136.37), controlPoint2: CGPointMake(-88.62, 159.54))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, 178.58), controlPoint1: CGPointMake(-74.31, 180.01), controlPoint2: CGPointMake(-61.77, 178.58))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, 178.58), controlPoint1: CGPointMake(-46.1, 178.58), controlPoint2: CGPointMake(30.54, 178.58))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, 171.54), controlPoint1: CGPointMake(60.8, 178.58), controlPoint2: CGPointMake(73.37, 181.02))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, 135.87), controlPoint1: CGPointMake(88.72, 160.49), controlPoint2: CGPointMake(90.46, 135.87))
        rectanglePath.addCurveToPoint(CGPointMake(90.46, -136.95), controlPoint1: CGPointMake(90.46, 135.87), controlPoint2: CGPointMake(90.46, -125.39))
        rectanglePath.addCurveToPoint(CGPointMake(80.45, -166.09), controlPoint1: CGPointMake(90.46, -137.96), controlPoint2: CGPointMake(91.47, -151.01))
        rectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.7), controlPoint2: CGPointMake(60.06, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
        rectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.09), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        caseStrokeColor.setStroke()
        rectanglePath.lineWidth = 10
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 110.01, frame.minY + 197.64)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-89.51, -177.14, 180, 356)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-80.23, -166.09))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-89.41, -136.95), controlPoint1: CGPointMake(-91.16, -151.46), controlPoint2: CGPointMake(-89.41, -136.95))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-89.41, 136.37))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, 171.54), controlPoint1: CGPointMake(-89.41, 136.37), controlPoint2: CGPointMake(-88.62, 159.54))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, 178.58), controlPoint1: CGPointMake(-74.31, 180.01), controlPoint2: CGPointMake(-61.77, 178.58))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, 178.58), controlPoint1: CGPointMake(-46.1, 178.58), controlPoint2: CGPointMake(30.54, 178.58))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, 171.54), controlPoint1: CGPointMake(60.8, 178.58), controlPoint2: CGPointMake(73.37, 181.02))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, 135.87), controlPoint1: CGPointMake(88.72, 160.49), controlPoint2: CGPointMake(90.46, 135.87))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(90.46, -136.95), controlPoint1: CGPointMake(90.46, 135.87), controlPoint2: CGPointMake(90.46, -125.39))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(80.45, -166.09), controlPoint1: CGPointMake(90.46, -137.96), controlPoint2: CGPointMake(91.47, -151.01))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(53.74, -177.14), controlPoint1: CGPointMake(72.69, -176.7), controlPoint2: CGPointMake(60.06, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-55.44, -177.14), controlPoint1: CGPointMake(42.79, -177.14), controlPoint2: CGPointMake(-51.61, -177.14))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.23, -166.09), controlPoint1: CGPointMake(-62.02, -177.14), controlPoint2: CGPointMake(-71.96, -177.14))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            caseStrokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 10
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 20, frame.minY + 80)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, (textYoffset - 0.00333333333339), 265, (textRectHeight + 0.00333333333339))
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: (textSize - 5)), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 91, frame.minY + 35, 40, 40)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 97.94, frame.maxY - 325))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 96.62, frame.maxY - 325), controlPoint1: CGPointMake(frame.minX + 107.19, frame.maxY - 325), controlPoint2: CGPointMake(frame.maxX - 106.78, frame.maxY - 325))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 96.62, frame.minY + 35), controlPoint1: CGPointMake(frame.maxX - 86.46, frame.maxY - 325), controlPoint2: CGPointMake(frame.maxX - 86.46, frame.minY + 35))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 97.94, frame.minY + 35), controlPoint1: CGPointMake(frame.maxX - 106.78, frame.minY + 35), controlPoint2: CGPointMake(frame.minX + 107.19, frame.minY + 35))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 97.94, frame.maxY - 325), controlPoint1: CGPointMake(frame.minX + 88.69, frame.minY + 35), controlPoint2: CGPointMake(frame.minX + 88.69, frame.maxY - 325))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        galaxyA7CameraImage.drawInRect(CGRectMake(floor(cameraRect.minX + 0.5), floor(cameraRect.minY - 1 + 0.5), galaxyA7CameraImage.size.width, galaxyA7CameraImage.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        caseStrokeColor.setStroke()
        cameraPath.lineWidth = 4.5
        cameraPath.stroke()


        //// Speaker Drawing
        let speakerRect: CGRect = CGRectMake(frame.minX + 141, frame.minY + 45, 20, 20)
        var speakerPath = UIBezierPath()
        speakerPath.moveToPoint(CGPointMake(frame.minX + 144.47, frame.maxY - 335))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 62.81, frame.maxY - 335), controlPoint1: CGPointMake(frame.minX + 149.09, frame.maxY - 335), controlPoint2: CGPointMake(frame.maxX - 67.89, frame.maxY - 335))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 62.81, frame.minY + 45), controlPoint1: CGPointMake(frame.maxX - 57.73, frame.maxY - 335), controlPoint2: CGPointMake(frame.maxX - 57.73, frame.minY + 45))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 144.47, frame.minY + 45), controlPoint1: CGPointMake(frame.maxX - 67.89, frame.minY + 45), controlPoint2: CGPointMake(frame.minX + 149.09, frame.minY + 45))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 144.47, frame.maxY - 335), controlPoint1: CGPointMake(frame.minX + 139.84, frame.minY + 45), controlPoint2: CGPointMake(frame.minX + 139.84, frame.maxY - 335))
        speakerPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        speakerPath.addClip()
        galaxyA7Speaker.drawInRect(CGRectMake(floor(speakerRect.minX + 0.5), floor(speakerRect.minY + 0.5), galaxyA7Speaker.size.width, galaxyA7Speaker.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Speaker Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, speakerPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let speakerOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, speakerOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        speakerOpaqueShadow.setFill()
        speakerPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        caseStrokeColor.setStroke()
        speakerPath.lineWidth = 4.5
        speakerPath.stroke()


        //// speakerRectangle Drawing
        let speakerRectanglePath = UIBezierPath(rect: CGRectMake(frame.minX + 131, frame.minY + 48, 11, 16))
        caseStrokeColor.setFill()
        speakerRectanglePath.fill()


        //// Led Drawing
        let ledRect: CGRect = CGRectMake(frame.minX + 60, frame.minY + 45, 20, 20)
        var ledPath = UIBezierPath()
        ledPath.moveToPoint(CGPointMake(frame.minX + 63.47, frame.maxY - 335))
        ledPath.addCurveToPoint(CGPointMake(frame.maxX - 143.81, frame.maxY - 335), controlPoint1: CGPointMake(frame.minX + 68.09, frame.maxY - 335), controlPoint2: CGPointMake(frame.maxX - 148.89, frame.maxY - 335))
        ledPath.addCurveToPoint(CGPointMake(frame.maxX - 143.81, frame.minY + 45), controlPoint1: CGPointMake(frame.maxX - 138.73, frame.maxY - 335), controlPoint2: CGPointMake(frame.maxX - 138.73, frame.minY + 45))
        ledPath.addCurveToPoint(CGPointMake(frame.minX + 63.47, frame.minY + 45), controlPoint1: CGPointMake(frame.maxX - 148.89, frame.minY + 45), controlPoint2: CGPointMake(frame.minX + 68.09, frame.minY + 45))
        ledPath.addCurveToPoint(CGPointMake(frame.minX + 63.47, frame.maxY - 335), controlPoint1: CGPointMake(frame.minX + 58.84, frame.minY + 45), controlPoint2: CGPointMake(frame.minX + 58.84, frame.maxY - 335))
        ledPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        ledPath.addClip()
        galaxyA7Led.drawInRect(CGRectMake(floor(ledRect.minX + 0.5), floor(ledRect.minY + 0.5), galaxyA7Led.size.width, galaxyA7Led.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Led Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ledPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ledOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, ledOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ledOpaqueShadow.setFill()
        ledPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        caseStrokeColor.setStroke()
        ledPath.lineWidth = 4.5
        ledPath.stroke()


        //// ledRectangle Drawing
        let ledRectanglePath = UIBezierPath(rect: CGRectMake(frame.minX + 80, frame.minY + 48, 11, 16))
        caseStrokeColor.setFill()
        ledRectanglePath.fill()
    }

    class func drawGalaxyNote2(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var fillColorRedComponent: CGFloat = 1,
            fillColorGreenComponent: CGFloat = 1,
            fillColorBlueComponent: CGFloat = 1
        fillColor.getRed(&fillColorRedComponent, green: &fillColorGreenComponent, blue: &fillColorBlueComponent, alpha: nil)

        let caseStrokeColor = UIColor(red: (fillColorRedComponent * 0.9), green: (fillColorGreenComponent * 0.9), blue: (fillColorBlueComponent * 0.9), alpha: (CGColorGetAlpha(fillColor.CGColor) * 0.9 + 0.1))
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.104)

        //// Shadow Declarations
        let cameraOuterShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        let cameraInnerShadow = NSShadow(color: UIColor.grayColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 10)

        //// Image Declarations
        let galaxyNote2Speaker = UIImage(contentsOfFile: "galaxyNote2Speaker.png")
        let galaxyNote2CameraImage = UIImage(contentsOfFile: "galaxyNote2CameraImage.png")

        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 120.5, frame.minY + 220.5)

        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(-94.18, -185.7))
        rectanglePath.addCurveToPoint(CGPointMake(-104.88, -153.29), controlPoint1: CGPointMake(-106.92, -169.44), controlPoint2: CGPointMake(-104.88, -153.29))
        rectanglePath.addLineToPoint(CGPointMake(-104.88, 150.74))
        rectanglePath.addCurveToPoint(CGPointMake(-80.02, 199), controlPoint1: CGPointMake(-104.88, 150.74), controlPoint2: CGPointMake(-108.36, 199))
        rectanglePath.addCurveToPoint(CGPointMake(-40.06, 199), controlPoint1: CGPointMake(-60.04, 199), controlPoint2: CGPointMake(-47.44, 199))
        rectanglePath.addCurveToPoint(CGPointMake(39.86, 199), controlPoint1: CGPointMake(-29.17, 199), controlPoint2: CGPointMake(12.82, 199))
        rectanglePath.addCurveToPoint(CGPointMake(79.83, 199), controlPoint1: CGPointMake(48.09, 199), controlPoint2: CGPointMake(54.85, 199))
        rectanglePath.addCurveToPoint(CGPointMake(104.77, 150.18), controlPoint1: CGPointMake(108.98, 199), controlPoint2: CGPointMake(104.77, 150.18))
        rectanglePath.addCurveToPoint(CGPointMake(104.77, -153.29), controlPoint1: CGPointMake(104.77, 150.18), controlPoint2: CGPointMake(104.77, -140.43))
        rectanglePath.addCurveToPoint(CGPointMake(93.1, -185.7), controlPoint1: CGPointMake(104.77, -154.42), controlPoint2: CGPointMake(105.95, -168.94))
        rectanglePath.addCurveToPoint(CGPointMake(61.97, -198), controlPoint1: CGPointMake(84.06, -197.51), controlPoint2: CGPointMake(69.34, -198))
        rectanglePath.addCurveToPoint(CGPointMake(-65.28, -198), controlPoint1: CGPointMake(49.21, -198), controlPoint2: CGPointMake(-60.82, -198))
        rectanglePath.addCurveToPoint(CGPointMake(-94.18, -185.7), controlPoint1: CGPointMake(-72.96, -198), controlPoint2: CGPointMake(-84.55, -198))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
        fillColor.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let rectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, rectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()

        CGContextRestoreGState(context)


        if (backgroundImageVisible) {
            //// Background Image Rectangle Drawing
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, frame.minX + 120.5, frame.minY + 220.5)

            let backgroundImageRectangleRect: CGRect = CGRectMake(-105.01, -198, 210, 397)
            var backgroundImageRectanglePath = UIBezierPath()
            backgroundImageRectanglePath.moveToPoint(CGPointMake(-94.17, -185.7))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-104.88, -153.29), controlPoint1: CGPointMake(-106.92, -169.44), controlPoint2: CGPointMake(-104.88, -153.29))
            backgroundImageRectanglePath.addLineToPoint(CGPointMake(-104.88, 150.74))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-80.01, 199), controlPoint1: CGPointMake(-104.88, 150.74), controlPoint2: CGPointMake(-108.36, 199))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-40.03, 199), controlPoint1: CGPointMake(-60.02, 199), controlPoint2: CGPointMake(-47.41, 199))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(39.94, 199), controlPoint1: CGPointMake(-29.13, 199), controlPoint2: CGPointMake(12.89, 199))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(79.93, 199), controlPoint1: CGPointMake(48.18, 199), controlPoint2: CGPointMake(55.94, 199))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(104.89, 150.18), controlPoint1: CGPointMake(107.93, 199), controlPoint2: CGPointMake(104.89, 150.18))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(104.89, -153.29), controlPoint1: CGPointMake(104.89, 150.18), controlPoint2: CGPointMake(104.89, -140.43))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(93.21, -185.7), controlPoint1: CGPointMake(104.89, -154.42), controlPoint2: CGPointMake(106.06, -168.94))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(62.06, -198), controlPoint1: CGPointMake(84.16, -197.51), controlPoint2: CGPointMake(69.43, -198))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-65.26, -198), controlPoint1: CGPointMake(49.29, -198), controlPoint2: CGPointMake(-60.8, -198))
            backgroundImageRectanglePath.addCurveToPoint(CGPointMake(-94.17, -185.7), controlPoint1: CGPointMake(-72.94, -198), controlPoint2: CGPointMake(-84.54, -198))
            backgroundImageRectanglePath.closePath()
            CGContextSaveGState(context)
            CGContextSetShadowWithColor(context, PhoneCase.outerShadow.shadowOffset, PhoneCase.outerShadow.shadowBlurRadius, PhoneCase.outerShadow.shadowColor.CGColor)
            CGContextBeginTransparencyLayer(context, nil)
            CGContextSaveGState(context)
            backgroundImageRectanglePath.addClip()
            image.drawInRect(CGRectMake(floor(backgroundImageRectangleRect.minX + 0.5), floor(backgroundImageRectangleRect.minY + 1 + 0.5), image.size.width, image.size.height))
            CGContextRestoreGState(context)
            CGContextEndTransparencyLayer(context)

            ////// Background Image Rectangle Inner Shadow
            CGContextSaveGState(context)
            CGContextClipToRect(context, backgroundImageRectanglePath.bounds)
            CGContextSetShadow(context, CGSizeMake(0, 0), 0)
            CGContextSetAlpha(context, CGColorGetAlpha(PhoneCase.innerShadow.shadowColor.CGColor))
            CGContextBeginTransparencyLayer(context, nil)
            let backgroundImageRectangleOpaqueShadow = PhoneCase.innerShadow.shadowColor.colorWithAlphaComponent(1)
            CGContextSetShadowWithColor(context, PhoneCase.innerShadow.shadowOffset, PhoneCase.innerShadow.shadowBlurRadius, backgroundImageRectangleOpaqueShadow.CGColor)
            CGContextSetBlendMode(context, kCGBlendModeSourceOut)
            CGContextBeginTransparencyLayer(context, nil)

            backgroundImageRectangleOpaqueShadow.setFill()
            backgroundImageRectanglePath.fill()

            CGContextEndTransparencyLayer(context)
            CGContextEndTransparencyLayer(context)
            CGContextRestoreGState(context)

            CGContextRestoreGState(context)

            strokeColor.setStroke()
            backgroundImageRectanglePath.lineWidth = 1
            backgroundImageRectanglePath.stroke()

            CGContextRestoreGState(context)
        }


        //// Text Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 16, frame.minY + 85)
        CGContextRotateCTM(context, 90 * M_PI / 180)
        CGContextScaleCTM(context, textXscale, textYscale)

        let textRect: CGRect = CGRectMake(0, -93.33, 280, (textRectHeight + 10.0033333333))
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Left;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AndersonSupercar", size: textSize), NSForegroundColorAttributeName: colorOfText, NSParagraphStyleAttributeName: textStyle]

        NSString(string: caseText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: caseText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);

        CGContextRestoreGState(context)


        //// Camera Drawing
        let cameraRect: CGRect = CGRectMake(frame.minX + 88, frame.minY + 40, 80, 40)
        var cameraPath = UIBezierPath()
        cameraPath.moveToPoint(CGPointMake(frame.minX + 101.83, frame.maxY - 360.43))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 130.87, frame.minY + 79.57), controlPoint1: CGPointMake(frame.minX + 111.15, frame.maxY - 360.43), controlPoint2: CGPointMake(frame.minX + 123.24, frame.minY + 80.54))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 136.85, frame.minY + 76.62), controlPoint1: CGPointMake(frame.minX + 132.59, frame.minY + 79.35), controlPoint2: CGPointMake(frame.minX + 135.01, frame.minY + 76.78))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 87.2, frame.maxY - 363.38), controlPoint1: CGPointMake(frame.minX + 143.04, frame.minY + 76.09), controlPoint2: CGPointMake(frame.maxX - 94.92, frame.maxY - 363.38))
        cameraPath.addCurveToPoint(CGPointMake(frame.maxX - 87.2, frame.minY + 43.26), controlPoint1: CGPointMake(frame.maxX - 66.93, frame.maxY - 363.38), controlPoint2: CGPointMake(frame.maxX - 66.93, frame.minY + 43.26))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 136.85, frame.minY + 43.26), controlPoint1: CGPointMake(frame.maxX - 94.46, frame.minY + 43.26), controlPoint2: CGPointMake(frame.minX + 142.67, frame.minY + 43.26))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 130.87, frame.minY + 40.31), controlPoint1: CGPointMake(frame.minX + 135.01, frame.minY + 43.26), controlPoint2: CGPointMake(frame.minX + 132.85, frame.minY + 40.47))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 101.83, frame.minY + 40.31), controlPoint1: CGPointMake(frame.minX + 121.7, frame.minY + 39.61), controlPoint2: CGPointMake(frame.minX + 111.57, frame.minY + 40.31))
        cameraPath.addCurveToPoint(CGPointMake(frame.minX + 101.83, frame.maxY - 360.43), controlPoint1: CGPointMake(frame.minX + 83.39, frame.minY + 40.31), controlPoint2: CGPointMake(frame.minX + 83.39, frame.maxY - 360.43))
        cameraPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        cameraPath.addClip()
        galaxyNote2CameraImage.drawInRect(CGRectMake(floor(cameraRect.minX + 0.5), floor(cameraRect.minY + 0.5), galaxyNote2CameraImage.size.width, galaxyNote2CameraImage.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Camera Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, cameraPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let cameraOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, cameraOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        cameraOpaqueShadow.setFill()
        cameraPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        caseStrokeColor.setStroke()
        cameraPath.lineWidth = 2.5
        cameraPath.stroke()


        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 53.29, frame.minY + 31))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 178.5, frame.minY + 31.51), controlPoint1: CGPointMake(frame.minX + 84.6, frame.minY + 31.13), controlPoint2: CGPointMake(frame.minX + 178.5, frame.minY + 31.51))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 198.47, frame.minY + 35.1), controlPoint1: CGPointMake(frame.minX + 178.5, frame.minY + 31.51), controlPoint2: CGPointMake(frame.minX + 191.82, frame.minY + 31))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 210.17, frame.minY + 45.34), controlPoint1: CGPointMake(frame.minX + 205.12, frame.minY + 39.2), controlPoint2: CGPointMake(frame.minX + 206.27, frame.minY + 40.22))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 216.5, frame.minY + 60.2), controlPoint1: CGPointMake(frame.minX + 214.06, frame.minY + 50.46), controlPoint2: CGPointMake(frame.minX + 216.5, frame.minY + 60.2))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 216.5, frame.minY + 388))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 178.99, frame.minY + 409), controlPoint1: CGPointMake(frame.minX + 216.5, frame.minY + 388), controlPoint2: CGPointMake(frame.minX + 216.01, frame.minY + 409))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 159.5, frame.minY + 409), controlPoint1: CGPointMake(frame.minX + 141.96, frame.minY + 409), controlPoint2: CGPointMake(frame.minX + 159.5, frame.minY + 409))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 81.55, frame.minY + 409))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 62.06, frame.minY + 409), controlPoint1: CGPointMake(frame.minX + 81.55, frame.minY + 409), controlPoint2: CGPointMake(frame.minX + 62.25, frame.minY + 409))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 47, frame.minY + 388.51), controlPoint1: CGPointMake(frame.minX + 62, frame.minY + 409), controlPoint2: CGPointMake(frame.minX + 53, frame.minY + 392.61))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 26, frame.minY + 379.29), controlPoint1: CGPointMake(frame.minX + 34.34, frame.minY + 379.86), controlPoint2: CGPointMake(frame.minX + 26, frame.minY + 386.46))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 26.5, frame.minY + 60.2), controlPoint1: CGPointMake(frame.minX + 26, frame.minY + 372.12), controlPoint2: CGPointMake(frame.minX + 26.5, frame.minY + 60.2))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 29.91, frame.minY + 45.34), controlPoint1: CGPointMake(frame.minX + 26.5, frame.minY + 60.2), controlPoint2: CGPointMake(frame.minX + 26.01, frame.minY + 52.51))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 53.29, frame.minY + 31), controlPoint1: CGPointMake(frame.minX + 31.45, frame.minY + 42.5), controlPoint2: CGPointMake(frame.minX + 36.73, frame.minY + 35.1))
        caseStrokeColor.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()


        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(frame.minX + 180.5, frame.minY + 31.5))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 168.5, frame.minY + 40.19), controlPoint1: CGPointMake(frame.minX + 180.5, frame.minY + 31.5), controlPoint2: CGPointMake(frame.minX + 171.5, frame.minY + 33.19))
        bezier2Path.addCurveToPoint(CGPointMake(frame.minX + 168.5, frame.minY + 59.5), controlPoint1: CGPointMake(frame.minX + 165.5, frame.minY + 47.19), controlPoint2: CGPointMake(frame.minX + 168.5, frame.minY + 59.5))
        caseStrokeColor.setStroke()
        bezier2Path.lineWidth = 2.5
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        var bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(frame.minX + 80, frame.minY + 31))
        bezier3Path.addCurveToPoint(CGPointMake(frame.minX + 88, frame.minY + 40), controlPoint1: CGPointMake(frame.minX + 80, frame.minY + 31), controlPoint2: CGPointMake(frame.minX + 86.25, frame.minY + 33.03))
        bezier3Path.addCurveToPoint(CGPointMake(frame.minX + 88, frame.minY + 58.8), controlPoint1: CGPointMake(frame.minX + 89.75, frame.minY + 46.98), controlPoint2: CGPointMake(frame.minX + 88, frame.minY + 58.8))
        caseStrokeColor.setStroke()
        bezier3Path.lineWidth = 2.5
        bezier3Path.stroke()


        //// Rectangle 2 Drawing
        var rectangle2Path = UIBezierPath()
        rectangle2Path.moveToPoint(CGPointMake(frame.minX + 87, frame.minY + 36))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 90, frame.minY + 46))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 91, frame.minY + 46))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 96, frame.minY + 41))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 100, frame.minY + 40))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 112, frame.minY + 40))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 126, frame.minY + 40))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 140, frame.minY + 43))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 155, frame.minY + 43))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 166, frame.minY + 49))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 167, frame.minY + 43))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 173, frame.minY + 36))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 174, frame.minY + 31))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 80, frame.minY + 31))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 87, frame.minY + 36))
        rectangle2Path.closePath()
        caseStrokeColor.setFill()
        rectangle2Path.fill()


        //// Speaker Drawing
        let speakerRect: CGRect = CGRectMake(frame.minX + 60, frame.minY + 365, 30, 15)
        var speakerPath = UIBezierPath()
        speakerPath.moveToPoint(CGPointMake(frame.minX + 65.2, frame.maxY - 60))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 155.72, frame.maxY - 60), controlPoint1: CGPointMake(frame.minX + 72.14, frame.maxY - 60), controlPoint2: CGPointMake(frame.maxX - 163.34, frame.maxY - 60))
        speakerPath.addCurveToPoint(CGPointMake(frame.maxX - 155.72, frame.minY + 365), controlPoint1: CGPointMake(frame.maxX - 148.09, frame.maxY - 60), controlPoint2: CGPointMake(frame.maxX - 148.09, frame.minY + 365))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 65.2, frame.minY + 365), controlPoint1: CGPointMake(frame.maxX - 163.34, frame.minY + 365), controlPoint2: CGPointMake(frame.minX + 72.14, frame.minY + 365))
        speakerPath.addCurveToPoint(CGPointMake(frame.minX + 65.2, frame.maxY - 60), controlPoint1: CGPointMake(frame.minX + 58.27, frame.minY + 365), controlPoint2: CGPointMake(frame.minX + 58.27, frame.maxY - 60))
        speakerPath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, cameraOuterShadow.shadowOffset, cameraOuterShadow.shadowBlurRadius, cameraOuterShadow.shadowColor.CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        speakerPath.addClip()
        galaxyNote2Speaker.drawInRect(CGRectMake(floor(speakerRect.minX + 0.5), floor(speakerRect.minY + 0.5), galaxyNote2Speaker.size.width, galaxyNote2Speaker.size.height))
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)

        ////// Speaker Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, speakerPath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha(cameraInnerShadow.shadowColor.CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let speakerOpaqueShadow = cameraInnerShadow.shadowColor.colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, cameraInnerShadow.shadowOffset, cameraInnerShadow.shadowBlurRadius, speakerOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, kCGBlendModeSourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        speakerOpaqueShadow.setFill()
        speakerPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        strokeColor.setStroke()
        speakerPath.lineWidth = 1.5
        speakerPath.stroke()
    }

    //// Generated Images

    class func imageOfIPhone5Case(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawIPhone5Case(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfIPhone5Case = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfIPhone5Case!
    }

    class func imageOfIPhone4Case(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawIPhone4Case(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfIPhone4Case = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfIPhone4Case!
    }

    class func imageOfIPhone6Case(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawIPhone6Case(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfIPhone6Case = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfIPhone6Case!
    }

    class func imageOfIPhone6PlusCase(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawIPhone6PlusCase(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfIPhone6PlusCase = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfIPhone6PlusCase!
    }

    class func imageOfGalaxyS3(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawGalaxyS3(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfGalaxyS3 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGalaxyS3!
    }

    class func imageOfGalaxyS4(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawGalaxyS4(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfGalaxyS4 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGalaxyS4!
    }

    class func imageOfGalaxyS5(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawGalaxyS5(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfGalaxyS5 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGalaxyS5!
    }

    class func imageOfGalaxyS4Mini(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawGalaxyS4Mini(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfGalaxyS4Mini = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGalaxyS4Mini!
    }

    class func imageOfGalaxyS5Mini(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawGalaxyS5Mini(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfGalaxyS5Mini = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGalaxyS5Mini!
    }

    class func imageOfGalaxyS6(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawGalaxyS6(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfGalaxyS6 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGalaxyS6!
    }

    class func imageOfGalaxyA3A5(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawGalaxyA3A5(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfGalaxyA3A5 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGalaxyA3A5!
    }

    class func imageOfGalaxyA7(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawGalaxyA7(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfGalaxyA7 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGalaxyA7!
    }

    class func imageOfGalaxyNote2(frame: CGRect, fillColor: UIColor, colorOfText: UIColor, image: UIImage, caseText: String, backgroundImageVisible: Bool, textRectHeight: CGFloat, textYscale: CGFloat, textSize: CGFloat, textXscale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), false, 0)
        PhoneCase.drawGalaxyNote2(frame, fillColor: fillColor, colorOfText: colorOfText, image: image, caseText: caseText, backgroundImageVisible: backgroundImageVisible, textRectHeight: textRectHeight, textYscale: textYscale, textSize: textSize, textXscale: textXscale)
        var imageOfGalaxyNote2 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGalaxyNote2!
    }

}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}

@objc protocol StyleKitSettableImage {
    var image: UIImage! { get set }
}

@objc protocol StyleKitSettableSelectedImage {
    var selectedImage: UIImage! { get set }
}

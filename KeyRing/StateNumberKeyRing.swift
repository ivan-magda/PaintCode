//
//  StateNumberKeyRing.swift
//  Blagaprint
//
//  Created by Ivan Magda on 03.02.16.
//  Copyright (c) 2016 Blagaprint. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StateNumberKeyRing : NSObject {

    //// Drawing Methods

    public class func drawKeyRing(frame frame: CGRect = CGRectMake(0, 0, 320, 320), numbers: String = "000", firstLetter: String = "М", lastLetters: String = "ММ", region: String = "197") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let keyCircleStrokeColor = UIColor(red: 0.573, green: 0.573, blue: 0.573, alpha: 1.000)
        let keyCircleColor = UIColor(red: 0.810, green: 0.810, blue: 0.810, alpha: 1.000)

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = UIColor.darkGrayColor()
        outerShadow.shadowOffset = CGSizeMake(3.1, 3.1)
        outerShadow.shadowBlurRadius = 5
        let holderShadow = NSShadow()
        holderShadow.shadowColor = UIColor.lightGrayColor()
        holderShadow.shadowOffset = CGSizeMake(3.1, 3.1)
        holderShadow.shadowBlurRadius = 5

        //// KeyRingGroup
        //// OutFrame Drawing
        let outFramePath = UIBezierPath()
        outFramePath.moveToPoint(CGPointMake(frame.minX + 67.91, frame.minY + 132.21))
        outFramePath.addLineToPoint(CGPointMake(frame.minX + 67.82, frame.minY + 190.08))
        outFramePath.addCurveToPoint(CGPointMake(frame.minX + 72.27, frame.minY + 198.37), controlPoint1: CGPointMake(frame.minX + 67.82, frame.minY + 190.08), controlPoint2: CGPointMake(frame.minX + 66.82, frame.minY + 196.55))
        outFramePath.addCurveToPoint(CGPointMake(frame.minX + 88.05, frame.minY + 199.69), controlPoint1: CGPointMake(frame.minX + 77.71, frame.minY + 200.19), controlPoint2: CGPointMake(frame.minX + 88.05, frame.minY + 199.69))
        outFramePath.addLineToPoint(CGPointMake(frame.minX + 287.75, frame.minY + 199.75))
        outFramePath.addCurveToPoint(CGPointMake(frame.minX + 303.06, frame.minY + 199.01), controlPoint1: CGPointMake(frame.minX + 287.75, frame.minY + 199.75), controlPoint2: CGPointMake(frame.minX + 297.61, frame.minY + 199.82))
        outFramePath.addCurveToPoint(CGPointMake(frame.minX + 307.75, frame.minY + 189.75), controlPoint1: CGPointMake(frame.minX + 308.5, frame.minY + 198.19), controlPoint2: CGPointMake(frame.minX + 307.75, frame.minY + 189.75))
        outFramePath.addLineToPoint(CGPointMake(frame.minX + 307.75, frame.minY + 131.75))
        outFramePath.addCurveToPoint(CGPointMake(frame.minX + 303.06, frame.minY + 120.7), controlPoint1: CGPointMake(frame.minX + 307.75, frame.minY + 131.75), controlPoint2: CGPointMake(frame.minX + 308.51, frame.minY + 122.52))
        outFramePath.addCurveToPoint(CGPointMake(frame.minX + 293.75, frame.minY + 119), controlPoint1: CGPointMake(frame.minX + 297.61, frame.minY + 118.88), controlPoint2: CGPointMake(frame.minX + 293.75, frame.minY + 119))
        outFramePath.addLineToPoint(CGPointMake(frame.minX + 89.69, frame.minY + 119))
        outFramePath.addCurveToPoint(CGPointMake(frame.minX + 72.27, frame.minY + 120.5), controlPoint1: CGPointMake(frame.minX + 89.69, frame.minY + 119), controlPoint2: CGPointMake(frame.minX + 77.71, frame.minY + 118.68))
        outFramePath.addCurveToPoint(CGPointMake(frame.minX + 67.91, frame.minY + 132.21), controlPoint1: CGPointMake(frame.minX + 66.82, frame.minY + 122.32), controlPoint2: CGPointMake(frame.minX + 67.91, frame.minY + 132.21))
        outFramePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, outerShadow.shadowOffset, outerShadow.shadowBlurRadius, (outerShadow.shadowColor as! UIColor).CGColor)
        UIColor.whiteColor().setFill()
        outFramePath.fill()
        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        outFramePath.lineWidth = 0.8
        outFramePath.stroke()


        //// InnerFrame Drawing
        let innerFramePath = UIBezierPath()
        innerFramePath.moveToPoint(CGPointMake(frame.minX + 74.15, frame.minY + 138.22))
        innerFramePath.addLineToPoint(CGPointMake(frame.minX + 74.07, frame.minY + 183.92))
        innerFramePath.addCurveToPoint(CGPointMake(frame.minX + 78.31, frame.minY + 191.15), controlPoint1: CGPointMake(frame.minX + 74.07, frame.minY + 183.92), controlPoint2: CGPointMake(frame.minX + 73.11, frame.minY + 189.69))
        innerFramePath.addCurveToPoint(CGPointMake(frame.minX + 93.36, frame.minY + 192.2), controlPoint1: CGPointMake(frame.minX + 83.51, frame.minY + 192.6), controlPoint2: CGPointMake(frame.minX + 93.36, frame.minY + 192.2))
        innerFramePath.addLineToPoint(CGPointMake(frame.minX + 283.92, frame.minY + 192.25))
        innerFramePath.addCurveToPoint(CGPointMake(frame.minX + 298.52, frame.minY + 191.66), controlPoint1: CGPointMake(frame.minX + 283.92, frame.minY + 192.25), controlPoint2: CGPointMake(frame.minX + 293.33, frame.minY + 192.31))
        innerFramePath.addCurveToPoint(CGPointMake(frame.minX + 303, frame.minY + 184.25), controlPoint1: CGPointMake(frame.minX + 303.72, frame.minY + 191), controlPoint2: CGPointMake(frame.minX + 303, frame.minY + 184.25))
        innerFramePath.addLineToPoint(CGPointMake(frame.minX + 303, frame.minY + 136.25))
        innerFramePath.addCurveToPoint(CGPointMake(frame.minX + 298.53, frame.minY + 129), controlPoint1: CGPointMake(frame.minX + 303, frame.minY + 136.25), controlPoint2: CGPointMake(frame.minX + 303.72, frame.minY + 130.45))
        innerFramePath.addCurveToPoint(CGPointMake(frame.minX + 283.92, frame.minY + 128.25), controlPoint1: CGPointMake(frame.minX + 293.33, frame.minY + 127.55), controlPoint2: CGPointMake(frame.minX + 283.92, frame.minY + 128.25))
        innerFramePath.addLineToPoint(CGPointMake(frame.minX + 88.94, frame.minY + 128.41))
        innerFramePath.addCurveToPoint(CGPointMake(frame.minX + 78.31, frame.minY + 129.57), controlPoint1: CGPointMake(frame.minX + 88.94, frame.minY + 128.41), controlPoint2: CGPointMake(frame.minX + 83.51, frame.minY + 128.12))
        innerFramePath.addCurveToPoint(CGPointMake(frame.minX + 74.15, frame.minY + 138.22), controlPoint1: CGPointMake(frame.minX + 73.11, frame.minY + 131.02), controlPoint2: CGPointMake(frame.minX + 74.15, frame.minY + 138.22))
        innerFramePath.closePath()
        innerFramePath.moveToPoint(CGPointMake(frame.minX + 244.5, frame.minY + 128.5))
        innerFramePath.addLineToPoint(CGPointMake(frame.minX + 244.5, frame.minY + 191.5))
        UIColor.whiteColor().setFill()
        innerFramePath.fill()
        UIColor.blackColor().setStroke()
        innerFramePath.lineWidth = 1.75
        innerFramePath.stroke()


        //// Number
        //// LastLettersText Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 183, frame.minY + 153)
        CGContextScaleCTM(context, 1, 1.2)

        let lastLettersTextRect = CGRectMake(0, 0, 60, 26.67)
        let lastLettersTextStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        lastLettersTextStyle.alignment = .Center

        let lastLettersTextFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(32), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: lastLettersTextStyle]

        let lastLettersTextTextHeight: CGFloat = NSString(string: lastLetters).boundingRectWithSize(CGSizeMake(lastLettersTextRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: lastLettersTextFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, lastLettersTextRect);
        NSString(string: lastLetters).drawInRect(CGRectMake(lastLettersTextRect.minX, lastLettersTextRect.minY + (lastLettersTextRect.height - lastLettersTextTextHeight) / 2, lastLettersTextRect.width, lastLettersTextTextHeight), withAttributes: lastLettersTextFontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// NumbersText Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 103, frame.minY + 135)
        CGContextScaleCTM(context, 1, 1.3)

        let numbersTextRect = CGRectMake(0, 0, 85, 38.46)
        let numbersTextStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        numbersTextStyle.alignment = .Center

        let numbersTextFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(45), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: numbersTextStyle]

        let numbersTextTextHeight: CGFloat = NSString(string: numbers).boundingRectWithSize(CGSizeMake(numbersTextRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: numbersTextFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, numbersTextRect);
        NSString(string: numbers).drawInRect(CGRectMake(numbersTextRect.minX, numbersTextRect.minY + (numbersTextRect.height - numbersTextTextHeight) / 2, numbersTextRect.width, numbersTextTextHeight), withAttributes: numbersTextFontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// FirstLetterText Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 77, frame.minY + 153)
        CGContextScaleCTM(context, 1, 1.2)

        let firstLetterTextRect = CGRectMake(0, 0, 26, 26.67)
        let firstLetterTextStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        firstLetterTextStyle.alignment = .Center

        let firstLetterTextFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(32), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: firstLetterTextStyle]

        let firstLetterTextTextHeight: CGFloat = NSString(string: firstLetter).boundingRectWithSize(CGSizeMake(firstLetterTextRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: firstLetterTextFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, firstLetterTextRect);
        NSString(string: firstLetter).drawInRect(CGRectMake(firstLetterTextRect.minX, firstLetterTextRect.minY + (firstLetterTextRect.height - firstLetterTextTextHeight) / 2, firstLetterTextRect.width, firstLetterTextTextHeight), withAttributes: firstLetterTextFontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// RegionText Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 243, frame.minY + 135)
        CGContextScaleCTM(context, 1, 1.2)

        let regionTextRect = CGRectMake(0, 0, 60, 26.67)
        let regionTextStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        regionTextStyle.alignment = .Center

        let regionTextFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(32), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: regionTextStyle]

        let regionTextTextHeight: CGFloat = NSString(string: region).boundingRectWithSize(CGSizeMake(regionTextRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: regionTextFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, regionTextRect);
        NSString(string: region).drawInRect(CGRectMake(regionTextRect.minX, regionTextRect.minY + (regionTextRect.height - regionTextTextHeight) / 2, regionTextRect.width, regionTextTextHeight), withAttributes: regionTextFontAttributes)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// FlagGroup
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(frame.minX + 278, frame.minY + 170, 20, 15))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()
        UIColor.blackColor().setStroke()
        rectanglePath.lineWidth = 0.5
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRectMake(frame.minX + 278, frame.minY + 170, 20, 5))
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRectMake(frame.minX + 278, frame.minY + 175, 20, 5))
        UIColor.blueColor().setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRectMake(frame.minX + 278, frame.minY + 180, 20, 5))
        UIColor.redColor().setFill()
        rectangle4Path.fill()




        //// RusText Drawing
        let rusTextRect = CGRectMake(frame.minX + 247, frame.minY + 170, 30, 15)
        let rusTextTextContent = NSString(string: "RUS")
        let rusTextStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        rusTextStyle.alignment = .Center

        let rusTextFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.systemFontSize()), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: rusTextStyle]

        let rusTextTextHeight: CGFloat = rusTextTextContent.boundingRectWithSize(CGSizeMake(rusTextRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: rusTextFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, rusTextRect);
        rusTextTextContent.drawInRect(CGRectMake(rusTextRect.minX, rusTextRect.minY + (rusTextRect.height - rusTextTextHeight) / 2, rusTextRect.width, rusTextTextHeight), withAttributes: rusTextFontAttributes)
        CGContextRestoreGState(context)






        //// KeyHolderGroup
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 11, frame.minY + 135.25)
        CGContextRotateCTM(context, -90 * CGFloat(M_PI) / 180)



        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(-29.75, 54, 8, 8))
        UIColor.blackColor().setFill()
        ovalPath.fill()
        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()


        //// KeyCircle Drawing
        let keyCirclePath = UIBezierPath()
        keyCirclePath.moveToPoint(CGPointMake(-26, -0.86))
        keyCirclePath.addCurveToPoint(CGPointMake(-40.44, 3.77), controlPoint1: CGPointMake(-31.39, -0.86), controlPoint2: CGPointMake(-36.37, 0.86))
        keyCirclePath.addCurveToPoint(CGPointMake(-50.86, 24), controlPoint1: CGPointMake(-46.75, 8.28), controlPoint2: CGPointMake(-50.86, 15.66))
        keyCirclePath.addCurveToPoint(CGPointMake(-26, 48.86), controlPoint1: CGPointMake(-50.86, 37.73), controlPoint2: CGPointMake(-39.73, 48.86))
        keyCirclePath.addCurveToPoint(CGPointMake(-1.14, 24), controlPoint1: CGPointMake(-12.27, 48.86), controlPoint2: CGPointMake(-1.14, 37.73))
        keyCirclePath.addCurveToPoint(CGPointMake(-26, -0.86), controlPoint1: CGPointMake(-1.14, 10.27), controlPoint2: CGPointMake(-12.27, -0.86))
        keyCirclePath.closePath()
        keyCirclePath.moveToPoint(CGPointMake(3, 24))
        keyCirclePath.addCurveToPoint(CGPointMake(-26, 53), controlPoint1: CGPointMake(3, 40.02), controlPoint2: CGPointMake(-9.98, 53))
        keyCirclePath.addCurveToPoint(CGPointMake(-55, 24), controlPoint1: CGPointMake(-42.02, 53), controlPoint2: CGPointMake(-55, 40.02))
        keyCirclePath.addCurveToPoint(CGPointMake(-43.69, 1.02), controlPoint1: CGPointMake(-55, 14.64), controlPoint2: CGPointMake(-50.57, 6.32))
        keyCirclePath.addCurveToPoint(CGPointMake(-26, -5), controlPoint1: CGPointMake(-38.8, -2.75), controlPoint2: CGPointMake(-32.66, -5))
        keyCirclePath.addCurveToPoint(CGPointMake(3, 24), controlPoint1: CGPointMake(-9.98, -5), controlPoint2: CGPointMake(3, 7.98))
        keyCirclePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, holderShadow.shadowOffset, holderShadow.shadowBlurRadius, (holderShadow.shadowColor as! UIColor).CGColor)
        keyCircleColor.setFill()
        keyCirclePath.fill()
        CGContextRestoreGState(context)

        keyCircleStrokeColor.setStroke()
        keyCirclePath.lineWidth = 0.75
        keyCirclePath.stroke()


        //// ChainRectangle Drawing
        let chainRectanglePath = UIBezierPath()
        chainRectanglePath.moveToPoint(CGPointMake(-28.23, 48.55))
        chainRectanglePath.addLineToPoint(CGPointMake(-28.23, 56.51))
        chainRectanglePath.addCurveToPoint(CGPointMake(-28.23, 59.92), controlPoint1: CGPointMake(-28.23, 56.51), controlPoint2: CGPointMake(-29.39, 59.07))
        chainRectanglePath.addCurveToPoint(CGPointMake(-23.6, 59.92), controlPoint1: CGPointMake(-27.08, 60.78), controlPoint2: CGPointMake(-24.76, 60.78))
        chainRectanglePath.addCurveToPoint(CGPointMake(-23.6, 56.51), controlPoint1: CGPointMake(-22.44, 59.07), controlPoint2: CGPointMake(-23.6, 56.51))
        chainRectanglePath.addLineToPoint(CGPointMake(-23.6, 48.55))
        chainRectanglePath.addCurveToPoint(CGPointMake(-25.14, 44), controlPoint1: CGPointMake(-23.6, 48.55), controlPoint2: CGPointMake(-22.05, 44))
        chainRectanglePath.addCurveToPoint(CGPointMake(-28.23, 48.55), controlPoint1: CGPointMake(-28.23, 44), controlPoint2: CGPointMake(-28.23, 48.55))
        chainRectanglePath.closePath()
        UIColor.whiteColor().setFill()
        chainRectanglePath.fill()
        UIColor.blackColor().setStroke()
        chainRectanglePath.lineWidth = 0.5
        chainRectanglePath.stroke()



        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfKeyRing(frame frame: CGRect = CGRectMake(0, 0, 320, 320), numbers: String = "000", firstLetter: String = "М", lastLetters: String = "ММ", region: String = "197") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StateNumberKeyRing.drawKeyRing(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), numbers: numbers, firstLetter: firstLetter, lastLetters: lastLetters, region: region)

        let imageOfKeyRing = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfKeyRing
    }

}
